
main.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	6500006f          	j	650 <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	000006ce          	.word	0x000006ce
   c:	000006cc          	.word	0x000006cc
	...
  30:	000006cc          	.word	0x000006cc
  34:	00000000          	.word	0x00000000
  38:	000006cc          	.word	0x000006cc
  3c:	00000000          	.word	0x00000000
  40:	000006cc          	.word	0x000006cc
  44:	000006cc          	.word	0x000006cc
  48:	000006cc          	.word	0x000006cc
  4c:	000006cc          	.word	0x000006cc
  50:	000006cc          	.word	0x000006cc
  54:	000006cc          	.word	0x000006cc
  58:	000006cc          	.word	0x000006cc
  5c:	000006cc          	.word	0x000006cc
  60:	000006cc          	.word	0x000006cc
  64:	000006cc          	.word	0x000006cc
  68:	000006cc          	.word	0x000006cc
  6c:	000006cc          	.word	0x000006cc
  70:	000006cc          	.word	0x000006cc
  74:	000006cc          	.word	0x000006cc
  78:	000006cc          	.word	0x000006cc
  7c:	000006cc          	.word	0x000006cc
  80:	000006cc          	.word	0x000006cc
  84:	000006cc          	.word	0x000006cc
  88:	000006cc          	.word	0x000006cc
  8c:	000006cc          	.word	0x000006cc
  90:	000006cc          	.word	0x000006cc
  94:	000006cc          	.word	0x000006cc
  98:	000006cc          	.word	0x000006cc
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	and	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srl	a1,a1,0x1
      ae:	0606                	sll	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	sll	a2,a2,0x1
      d4:	0686                	sll	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srl	a3,a3,0x1
      e6:	8205                	srl	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
     136:	1131                	add	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
     144:	c699                	beqz	a3,152 <mini_pad+0x1c>
     146:	4301                	li	t1,0
     148:	0096d763          	bge	a3,s1,156 <mini_pad+0x20>
     14c:	84b6                	mv	s1,a3
     14e:	4305                	li	t1,1
     150:	a019                	j	156 <mini_pad+0x20>
     152:	4301                	li	t1,0
     154:	86a6                	mv	a3,s1
     156:	40968433          	sub	s0,a3,s1
     15a:	00045363          	bgez	s0,160 <mini_pad+0x2a>
     15e:	4401                	li	s0,0
     160:	8622                	mv	a2,s0
     162:	853a                	mv	a0,a4
     164:	c23e                	sw	a5,4(sp)
     166:	c01a                	sw	t1,0(sp)
     168:	0b3000ef          	jal	a1a <memset>
     16c:	4302                	lw	t1,0(sp)
     16e:	4792                	lw	a5,4(sp)
     170:	872a                	mv	a4,a0
     172:	008506b3          	add	a3,a0,s0
     176:	4601                	li	a2,0
     178:	40c485b3          	sub	a1,s1,a2
     17c:	04b04263          	bgtz	a1,1c0 <mini_pad+0x8a>
     180:	0004d363          	bgez	s1,186 <mini_pad+0x50>
     184:	4481                	li	s1,0
     186:	009685b3          	add	a1,a3,s1
     18a:	40e58533          	sub	a0,a1,a4
     18e:	02030463          	beqz	t1,1b6 <mini_pad+0x80>
     192:	02b77263          	bgeu	a4,a1,1b6 <mini_pad+0x80>
     196:	02a00793          	li	a5,42
     19a:	fef58fa3          	sb	a5,-1(a1)
     19e:	fff58693          	add	a3,a1,-1
     1a2:	00d77a63          	bgeu	a4,a3,1b6 <mini_pad+0x80>
     1a6:	fef58f23          	sb	a5,-2(a1)
     1aa:	ffe58693          	add	a3,a1,-2
     1ae:	00d77463          	bgeu	a4,a3,1b6 <mini_pad+0x80>
     1b2:	fef58ea3          	sb	a5,-3(a1)
     1b6:	40c2                	lw	ra,16(sp)
     1b8:	4432                	lw	s0,12(sp)
     1ba:	44a2                	lw	s1,8(sp)
     1bc:	0151                	add	sp,sp,20
     1be:	8082                	ret
     1c0:	00c785b3          	add	a1,a5,a2
     1c4:	0005c503          	lbu	a0,0(a1)
     1c8:	00c685b3          	add	a1,a3,a2
     1cc:	0605                	add	a2,a2,1
     1ce:	00a58023          	sb	a0,0(a1)
     1d2:	b75d                	j	178 <mini_pad+0x42>

000001d4 <DelaySysTick>:
     1d4:	e000f7b7          	lui	a5,0xe000f
     1d8:	479c                	lw	a5,8(a5)
     1da:	e000f737          	lui	a4,0xe000f
     1de:	953e                	add	a0,a0,a5
     1e0:	471c                	lw	a5,8(a4)
     1e2:	8f89                	sub	a5,a5,a0
     1e4:	fe07cee3          	bltz	a5,1e0 <DelaySysTick+0xc>
     1e8:	8082                	ret

000001ea <mini_itoa.part.0>:
     1ea:	1101                	add	sp,sp,-32
     1ec:	ce06                	sw	ra,28(sp)
     1ee:	cc22                	sw	s0,24(sp)
     1f0:	ca26                	sw	s1,20(sp)
     1f2:	c002                	sw	zero,0(sp)
     1f4:	832a                	mv	t1,a0
     1f6:	00055763          	bgez	a0,204 <mini_itoa.part.0+0x1a>
     1fa:	e689                	bnez	a3,204 <mini_itoa.part.0+0x1a>
     1fc:	4785                	li	a5,1
     1fe:	40a00333          	neg	t1,a0
     202:	c03e                	sw	a5,0(sp)
     204:	8a05                	and	a2,a2,1
     206:	06100413          	li	s0,97
     20a:	c219                	beqz	a2,210 <mini_itoa.part.0+0x26>
     20c:	04100413          	li	s0,65
     210:	84ba                	mv	s1,a4
     212:	1459                	add	s0,s0,-10
     214:	851a                	mv	a0,t1
     216:	c83a                	sw	a4,16(sp)
     218:	c21a                	sw	t1,4(sp)
     21a:	c62e                	sw	a1,12(sp)
     21c:	c41a                	sw	t1,8(sp)
     21e:	35f9                	jal	ec <__umodsi3>
     220:	47a5                	li	a5,9
     222:	4322                	lw	t1,8(sp)
     224:	45b2                	lw	a1,12(sp)
     226:	4742                	lw	a4,16(sp)
     228:	0ff57693          	zext.b	a3,a0
     22c:	06a7e163          	bltu	a5,a0,28e <mini_itoa.part.0+0xa4>
     230:	03068693          	add	a3,a3,48
     234:	0ff6f693          	zext.b	a3,a3
     238:	00148793          	add	a5,s1,1
     23c:	00d48023          	sb	a3,0(s1)
     240:	851a                	mv	a0,t1
     242:	c83a                	sw	a4,16(sp)
     244:	c63e                	sw	a5,12(sp)
     246:	c42e                	sw	a1,8(sp)
     248:	3da5                	jal	c0 <__hidden___udivsi3>
     24a:	4692                	lw	a3,4(sp)
     24c:	45a2                	lw	a1,8(sp)
     24e:	47b2                	lw	a5,12(sp)
     250:	4742                	lw	a4,16(sp)
     252:	832a                	mv	t1,a0
     254:	02b6fb63          	bgeu	a3,a1,28a <mini_itoa.part.0+0xa0>
     258:	4682                	lw	a3,0(sp)
     25a:	c699                	beqz	a3,268 <mini_itoa.part.0+0x7e>
     25c:	02d00693          	li	a3,45
     260:	00d78023          	sb	a3,0(a5) # e000f000 <__global_pointer$+0xc000e6f8>
     264:	00248793          	add	a5,s1,2
     268:	40e78533          	sub	a0,a5,a4
     26c:	01f55693          	srl	a3,a0,0x1f
     270:	96aa                	add	a3,a3,a0
     272:	00078023          	sb	zero,0(a5)
     276:	8685                	sra	a3,a3,0x1
     278:	4601                	li	a2,0
     27a:	17fd                	add	a5,a5,-1
     27c:	00d64b63          	blt	a2,a3,292 <mini_itoa.part.0+0xa8>
     280:	40f2                	lw	ra,28(sp)
     282:	4462                	lw	s0,24(sp)
     284:	44d2                	lw	s1,20(sp)
     286:	6105                	add	sp,sp,32
     288:	8082                	ret
     28a:	84be                	mv	s1,a5
     28c:	b761                	j	214 <mini_itoa.part.0+0x2a>
     28e:	96a2                	add	a3,a3,s0
     290:	b755                	j	234 <mini_itoa.part.0+0x4a>
     292:	00c705b3          	add	a1,a4,a2
     296:	0007c283          	lbu	t0,0(a5)
     29a:	0005c303          	lbu	t1,0(a1)
     29e:	0605                	add	a2,a2,1
     2a0:	00558023          	sb	t0,0(a1)
     2a4:	00678023          	sb	t1,0(a5)
     2a8:	bfc9                	j	27a <mini_itoa.part.0+0x90>

000002aa <ssd1306_i2c_setup>:
void ssd1306_i2c_setup(void)
{
	uint16_t tempreg;
	
	// Reset I2C1 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     2aa:	400217b7          	lui	a5,0x40021
     2ae:	4b98                	lw	a4,16(a5)
     2b0:	002006b7          	lui	a3,0x200
     2b4:	8f55                	or	a4,a4,a3
     2b6:	cb98                	sw	a4,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     2b8:	4b98                	lw	a4,16(a5)
     2ba:	ffe006b7          	lui	a3,0xffe00
     2be:	16fd                	add	a3,a3,-1 # ffdfffff <__global_pointer$+0xdfdff6f7>
     2c0:	8f75                	and	a4,a4,a3
     2c2:	cb98                	sw	a4,16(a5)
	
	// set freq
	tempreg = I2C1->CTLR2;
     2c4:	400057b7          	lui	a5,0x40005
     2c8:	4047d703          	lhu	a4,1028(a5) # 40005404 <__global_pointer$+0x20004afc>
	tempreg &= ~I2C_CTLR2_FREQ;
     2cc:	66c1                	lui	a3,0x10
     2ce:	fc068693          	add	a3,a3,-64 # ffc0 <main.c.9f50ad4d+0xd6aa>
     2d2:	8f75                	and	a4,a4,a3
	tempreg |= (FUNCONF_SYSTEM_CORE_CLOCK/SSD1306_I2C_PRERATE)&I2C_CTLR2_FREQ;
     2d4:	01876713          	or	a4,a4,24
	I2C1->CTLR2 = tempreg;
     2d8:	40e79223          	sh	a4,1028(a5)
	tempreg = (FUNCONF_SYSTEM_CORE_CLOCK/(25*SSD1306_I2C_CLKRATE))&I2C_CKCFGR_CCR;
	tempreg |= I2C_CKCFGR_DUTY;
#endif
	tempreg |= I2C_CKCFGR_FS;
#endif
	I2C1->CKCFGR = tempreg;
     2dc:	7771                	lui	a4,0xffffc
     2de:	0705                	add	a4,a4,1 # ffffc001 <__global_pointer$+0xdfffb6f9>
     2e0:	40e79e23          	sh	a4,1052(a5)
	// initialize the state
	ssd1306_i2c_irq_state = 0;
#endif
	
	// Enable I2C
	I2C1->CTLR1 |= I2C_CTLR1_PE;
     2e4:	4007d703          	lhu	a4,1024(a5)
     2e8:	00176713          	or	a4,a4,1
     2ec:	40e79023          	sh	a4,1024(a5)

	// set ACK mode
	I2C1->CTLR1 |= I2C_CTLR1_ACK;
     2f0:	4007d703          	lhu	a4,1024(a5)
     2f4:	40076713          	or	a4,a4,1024
     2f8:	40e79023          	sh	a4,1024(a5)
}
     2fc:	8082                	ret

000002fe <ssd1306_drawImage>:

/*
 * draw a an image from an array, directly into to the display buffer
 * the color modes allow for overwriting and even layering (sprites!)
 */
void ssd1306_drawImage(int x, int y, const unsigned char* input, uint8_t width, uint8_t height, uint8_t color_mode) {
     2fe:	7139                	add	sp,sp,-64
     300:	d43e                	sw	a5,40(sp)
	int x_absolute;
	int y_absolute;
	uint8_t pixel;
	uint8_t bytes_to_draw = width / 8;
     302:	0036d793          	srl	a5,a3,0x3
     306:	0f86f693          	and	a3,a3,248
     30a:	c63e                	sw	a5,12(sp)
	uint16_t buffer_addr;

	for (uint8_t line = 0; line < height; line++) {
     30c:	00a687b3          	add	a5,a3,a0
     310:	ca3e                	sw	a5,20(sp)
				uint8_t input_pixel = input_byte & (1 << pixel);

				switch (color_mode) {
					case 0:
						// write pixels as they are
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     312:	200007b7          	lui	a5,0x20000
     316:	10878793          	add	a5,a5,264 # 20000108 <ssd1306_buffer>
void ssd1306_drawImage(int x, int y, const unsigned char* input, uint8_t width, uint8_t height, uint8_t color_mode) {
     31a:	dc22                	sw	s0,56(sp)
     31c:	de06                	sw	ra,60(sp)
     31e:	da26                	sw	s1,52(sp)
     320:	c02a                	sw	a0,0(sp)
     322:	ce2e                	sw	a1,28(sp)
     324:	d032                	sw	a2,32(sp)
     326:	d23a                	sw	a4,36(sp)
	for (uint8_t line = 0; line < height; line++) {
     328:	4401                	li	s0,0
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     32a:	c23e                	sw	a5,4(sp)
		y_absolute = y + line;
     32c:	47f2                	lw	a5,28(sp)
     32e:	97a2                	add	a5,a5,s0
    if (y_absolute < 0) {
     330:	0007dd63          	bgez	a5,34a <ssd1306_drawImage+0x4c>
	for (uint8_t line = 0; line < height; line++) {
     334:	5792                	lw	a5,36(sp)
     336:	0405                	add	s0,s0,1
     338:	0ff47413          	zext.b	s0,s0
     33c:	fef468e3          	bltu	s0,a5,32c <ssd1306_drawImage+0x2e>
		}
		#if SSD1306_LOG_IMAGE == 1
		printf("\n\r");
		#endif
	}
}
     340:	50f2                	lw	ra,60(sp)
     342:	5462                	lw	s0,56(sp)
     344:	54d2                	lw	s1,52(sp)
     346:	6121                	add	sp,sp,64
     348:	8082                	ret
		if (y_absolute >= SSD1306_H || y_absolute < 0) {
     34a:	03f00713          	li	a4,63
     34e:	fef769e3          	bltu	a4,a5,340 <ssd1306_drawImage+0x42>
		uint8_t v_mask = 1 << (y_absolute & 7);
     352:	0077f713          	and	a4,a5,7
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     356:	878d                	sra	a5,a5,0x3
			uint8_t input_byte = input[byte + line * bytes_to_draw];
     358:	45b2                	lw	a1,12(sp)
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     35a:	079e                	sll	a5,a5,0x7
     35c:	07c2                	sll	a5,a5,0x10
		uint8_t v_mask = 1 << (y_absolute & 7);
     35e:	4685                	li	a3,1
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     360:	83c1                	srl	a5,a5,0x10
			uint8_t input_byte = input[byte + line * bytes_to_draw];
     362:	8522                	mv	a0,s0
		uint8_t v_mask = 1 << (y_absolute & 7);
     364:	00e694b3          	sll	s1,a3,a4
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     368:	c43e                	sw	a5,8(sp)
			uint8_t input_byte = input[byte + line * bytes_to_draw];
     36a:	3b1d                	jal	a0 <__mulsi3>
     36c:	5782                	lw	a5,32(sp)
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     36e:	01849693          	sll	a3,s1,0x18
     372:	86e1                	sra	a3,a3,0x18
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     374:	4752                	lw	a4,20(sp)
     376:	953e                	add	a0,a0,a5
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     378:	fff6c793          	not	a5,a3
     37c:	d83e                	sw	a5,48(sp)
			uint8_t input_byte = input[byte + line * bytes_to_draw];
     37e:	00054783          	lbu	a5,0(a0)
     382:	c83e                	sw	a5,16(sp)
				if (x_absolute >= SSD1306_W) {
     384:	07f00793          	li	a5,127
     388:	06e7ca63          	blt	a5,a4,3fc <ssd1306_drawImage+0xfe>
     38c:	47a2                	lw	a5,8(sp)
				x_absolute = x + 8 * (bytes_to_draw - byte) + pixel;
     38e:	4601                	li	a2,0
     390:	97ba                	add	a5,a5,a4
     392:	07c2                	sll	a5,a5,0x10
     394:	83c1                	srl	a5,a5,0x10
     396:	cc3e                	sw	a5,24(sp)
				if (x_absolute >= SSD1306_W) {
     398:	08000793          	li	a5,128
     39c:	8f99                	sub	a5,a5,a4
     39e:	d63e                	sw	a5,44(sp)
				uint8_t input_pixel = input_byte & (1 << pixel);
     3a0:	47c2                	lw	a5,16(sp)
     3a2:	4485                	li	s1,1
     3a4:	00c492b3          	sll	t0,s1,a2
     3a8:	0057f2b3          	and	t0,a5,t0
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     3ac:	47e2                	lw	a5,24(sp)
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     3ae:	4312                	lw	t1,4(sp)
     3b0:	53c2                	lw	t2,48(sp)
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     3b2:	00c785b3          	add	a1,a5,a2
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     3b6:	05c2                	sll	a1,a1,0x10
     3b8:	81c1                	srl	a1,a1,0x10
     3ba:	932e                	add	t1,t1,a1
     3bc:	00034303          	lbu	t1,0(t1)
     3c0:	87b6                	mv	a5,a3
     3c2:	00737333          	and	t1,t1,t2
				switch (color_mode) {
     3c6:	53a2                	lw	t2,40(sp)
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     3c8:	0362                	sll	t1,t1,0x18
     3ca:	41835313          	sra	t1,t1,0x18
				switch (color_mode) {
     3ce:	00938663          	beq	t2,s1,3da <ssd1306_drawImage+0xdc>
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     3d2:	00029663          	bnez	t0,3de <ssd1306_drawImage+0xe0>
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (!input_pixel ? v_mask : 0);
     3d6:	4781                	li	a5,0
     3d8:	a019                	j	3de <ssd1306_drawImage+0xe0>
     3da:	fe029ee3          	bnez	t0,3d6 <ssd1306_drawImage+0xd8>
     3de:	0067e7b3          	or	a5,a5,t1
     3e2:	4312                	lw	t1,4(sp)
     3e4:	0ff7f793          	zext.b	a5,a5
     3e8:	959a                	add	a1,a1,t1
     3ea:	00f58023          	sb	a5,0(a1)
			for (pixel = 0; pixel < 8; pixel++) {
     3ee:	479d                	li	a5,7
     3f0:	00f60663          	beq	a2,a5,3fc <ssd1306_drawImage+0xfe>
				if (x_absolute >= SSD1306_W) {
     3f4:	57b2                	lw	a5,44(sp)
     3f6:	0605                	add	a2,a2,1
     3f8:	fac794e3          	bne	a5,a2,3a0 <ssd1306_drawImage+0xa2>
		for (uint8_t byte = 0; byte < bytes_to_draw; byte++) {
     3fc:	4782                	lw	a5,0(sp)
     3fe:	1761                	add	a4,a4,-8
     400:	0505                	add	a0,a0,1
     402:	f6f71ee3          	bne	a4,a5,37e <ssd1306_drawImage+0x80>
     406:	b73d                	j	334 <ssd1306_drawImage+0x36>

00000408 <ssd1306_drawPixel.constprop.0>:
	if(x >= SSD1306_W)
     408:	01851793          	sll	a5,a0,0x18
     40c:	87e1                	sra	a5,a5,0x18
     40e:	0207c863          	bltz	a5,43e <ssd1306_drawPixel.constprop.0+0x36>
	if(y >= SSD1306_H)
     412:	03f00793          	li	a5,63
     416:	02b7e463          	bltu	a5,a1,43e <ssd1306_drawPixel.constprop.0+0x36>
	addr = x + SSD1306_W*(y/8);
     41a:	0035d793          	srl	a5,a1,0x3
     41e:	079e                	sll	a5,a5,0x7
		ssd1306_buffer[addr] |= (1<<(y&7));
     420:	953e                	add	a0,a0,a5
     422:	200007b7          	lui	a5,0x20000
     426:	10878793          	add	a5,a5,264 # 20000108 <ssd1306_buffer>
     42a:	97aa                	add	a5,a5,a0
     42c:	0007c683          	lbu	a3,0(a5)
     430:	899d                	and	a1,a1,7
     432:	4705                	li	a4,1
     434:	00b71733          	sll	a4,a4,a1
     438:	8f55                	or	a4,a4,a3
     43a:	00e78023          	sb	a4,0(a5)
}
     43e:	8082                	ret

00000440 <ssd1306_drawLine.constprop.0>:
}

/*
 * Bresenham line draw routine swiped from Wikipedia
 */
void ssd1306_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t color)
     440:	fd810113          	add	sp,sp,-40
{
	int16_t steep;
	int16_t deltax, deltay, error, ystep, x, y;

	/* flip sense 45deg to keep error calc in range */
	steep = (gfx_abs(y1 - y0) > gfx_abs(x1 - x0));
     444:	40b687b3          	sub	a5,a3,a1
void ssd1306_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t color)
     448:	ce26                	sw	s1,28(sp)
     44a:	84ae                	mv	s1,a1
	return (x<0) ? -x : x;
     44c:	01079593          	sll	a1,a5,0x10
     450:	85c1                	sra	a1,a1,0x10
     452:	85bd                	sra	a1,a1,0xf
     454:	8fad                	xor	a5,a5,a1
     456:	8f8d                	sub	a5,a5,a1
     458:	07c2                	sll	a5,a5,0x10
     45a:	87c1                	sra	a5,a5,0x10
void ssd1306_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t color)
     45c:	d022                	sw	s0,32(sp)
	steep = (gfx_abs(y1 - y0) > gfx_abs(x1 - x0));
     45e:	40a60433          	sub	s0,a2,a0
	return (x<0) ? -x : x;
     462:	c03e                	sw	a5,0(sp)
     464:	01041793          	sll	a5,s0,0x10
     468:	87c1                	sra	a5,a5,0x10
     46a:	87bd                	sra	a5,a5,0xf
     46c:	8c3d                	xor	s0,s0,a5
     46e:	8c1d                	sub	s0,s0,a5
     470:	01041793          	sll	a5,s0,0x10
     474:	87c1                	sra	a5,a5,0x10
     476:	c23e                	sw	a5,4(sp)

	if(steep)
     478:	4712                	lw	a4,4(sp)
     47a:	4782                	lw	a5,0(sp)
void ssd1306_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t color)
     47c:	d206                	sw	ra,36(sp)
	if(steep)
     47e:	00f74863          	blt	a4,a5,48e <ssd1306_drawLine.constprop.0+0x4e>
     482:	87b6                	mv	a5,a3
     484:	86b2                	mv	a3,a2
     486:	863e                	mv	a2,a5
     488:	87a6                	mv	a5,s1
     48a:	84aa                	mv	s1,a0
     48c:	853e                	mv	a0,a5
		gfx_swap(&x0, &y0);
		gfx_swap(&x1, &y1);
	}

	/* run low->high */
	if(x0 > x1)
     48e:	0096e863          	bltu	a3,s1,49e <ssd1306_drawLine.constprop.0+0x5e>
     492:	87b2                	mv	a5,a2
     494:	862a                	mv	a2,a0
     496:	853e                	mv	a0,a5
     498:	87b6                	mv	a5,a3
     49a:	86a6                	mv	a3,s1
     49c:	84be                	mv	s1,a5
		gfx_swap(&x0, &x1);
		gfx_swap(&y0, &y1);
	}

	/* set up loop initial conditions */
	deltax = x1 - x0;
     49e:	40d485b3          	sub	a1,s1,a3
     4a2:	01059793          	sll	a5,a1,0x10
     4a6:	83c1                	srl	a5,a5,0x10
     4a8:	c63e                	sw	a5,12(sp)
	deltay = gfx_abs(y1 - y0);
     4aa:	40c507b3          	sub	a5,a0,a2
	return (x<0) ? -x : x;
     4ae:	01079313          	sll	t1,a5,0x10
     4b2:	41035313          	sra	t1,t1,0x10
     4b6:	40f35313          	sra	t1,t1,0xf
     4ba:	00f347b3          	xor	a5,t1,a5
     4be:	406787b3          	sub	a5,a5,t1
     4c2:	07c2                	sll	a5,a5,0x10
	error = deltax/2;
     4c4:	05c2                	sll	a1,a1,0x10
	return (x<0) ? -x : x;
     4c6:	83c1                	srl	a5,a5,0x10
	error = deltax/2;
     4c8:	85c1                	sra	a1,a1,0x10
	return (x<0) ? -x : x;
     4ca:	c83e                	sw	a5,16(sp)
	y = y0;
	if(y0 < y1)
		ystep = 1;
	else
		ystep = -1;
     4cc:	577d                	li	a4,-1
	error = deltax/2;
     4ce:	01f5d793          	srl	a5,a1,0x1f
     4d2:	97ae                	add	a5,a5,a1
	y = y0;
     4d4:	01061313          	sll	t1,a2,0x10
		ystep = -1;
     4d8:	c43a                	sw	a4,8(sp)
	error = deltax/2;
     4da:	8785                	sra	a5,a5,0x1
	y = y0;
     4dc:	41035313          	sra	t1,t1,0x10
	if(y0 < y1)
     4e0:	00a67463          	bgeu	a2,a0,4e8 <ssd1306_drawLine.constprop.0+0xa8>
		ystep = 1;
     4e4:	4705                	li	a4,1
     4e6:	c43a                	sw	a4,8(sp)

	/* loop x */
	for(x=x0;x<=x1;x++)
     4e8:	01069413          	sll	s0,a3,0x10
     4ec:	8441                	sra	s0,s0,0x10
     4ee:	0084d863          	bge	s1,s0,4fe <ssd1306_drawLine.constprop.0+0xbe>
		{
			y = y + ystep;
			error = error + deltax;
		}
	}
}
     4f2:	5092                	lw	ra,36(sp)
     4f4:	5402                	lw	s0,32(sp)
     4f6:	44f2                	lw	s1,28(sp)
     4f8:	02810113          	add	sp,sp,40
     4fc:	8082                	ret
		if(steep)
     4fe:	4702                	lw	a4,0(sp)
     500:	4692                	lw	a3,4(sp)
     502:	cc3e                	sw	a5,24(sp)
     504:	ca1a                	sw	t1,20(sp)
     506:	0ff47613          	zext.b	a2,s0
			ssd1306_drawPixel(y, x, color);
     50a:	0ff37513          	zext.b	a0,t1
		if(steep)
     50e:	02e6db63          	bge	a3,a4,544 <ssd1306_drawLine.constprop.0+0x104>
			ssd1306_drawPixel(y, x, color);
     512:	85b2                	mv	a1,a2
     514:	3dd5                	jal	408 <ssd1306_drawPixel.constprop.0>
     516:	4352                	lw	t1,20(sp)
     518:	47e2                	lw	a5,24(sp)
		error = error - deltay;
     51a:	4742                	lw	a4,16(sp)
     51c:	8f99                	sub	a5,a5,a4
     51e:	01079613          	sll	a2,a5,0x10
     522:	07c2                	sll	a5,a5,0x10
     524:	87c1                	sra	a5,a5,0x10
     526:	8241                	srl	a2,a2,0x10
		if(error < 0)
     528:	0007db63          	bgez	a5,53e <ssd1306_drawLine.constprop.0+0xfe>
			y = y + ystep;
     52c:	47a2                	lw	a5,8(sp)
     52e:	933e                	add	t1,t1,a5
			error = error + deltax;
     530:	47b2                	lw	a5,12(sp)
			y = y + ystep;
     532:	0342                	sll	t1,t1,0x10
     534:	41035313          	sra	t1,t1,0x10
			error = error + deltax;
     538:	97b2                	add	a5,a5,a2
     53a:	07c2                	sll	a5,a5,0x10
     53c:	87c1                	sra	a5,a5,0x10
     53e:	00140693          	add	a3,s0,1
     542:	b75d                	j	4e8 <ssd1306_drawLine.constprop.0+0xa8>
			ssd1306_drawPixel(x, y, color);
     544:	85aa                	mv	a1,a0
     546:	8532                	mv	a0,a2
     548:	35c1                	jal	408 <ssd1306_drawPixel.constprop.0>
     54a:	47e2                	lw	a5,24(sp)
     54c:	4352                	lw	t1,20(sp)
     54e:	b7f1                	j	51a <ssd1306_drawLine.constprop.0+0xda>

00000550 <internal_handle_input.constprop.0>:
     550:	e00007b7          	lui	a5,0xe0000
     554:	0f478793          	add	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff7ec>
     558:	439c                	lw	a5,0(a5)
     55a:	8082                	ret

0000055c <_write.constprop.0>:
     55c:	1101                	add	sp,sp,-32
     55e:	cc22                	sw	s0,24(sp)
     560:	ce06                	sw	ra,28(sp)
     562:	ca26                	sw	s1,20(sp)
     564:	c02a                	sw	a0,0(sp)
     566:	c802                	sw	zero,16(sp)
     568:	842e                	mv	s0,a1
     56a:	e1f9                	bnez	a1,630 <_write.constprop.0+0xd4>
     56c:	e00007b7          	lui	a5,0xe0000
     570:	0f478793          	add	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff7ec>
     574:	439c                	lw	a5,0(a5)
     576:	c789                	beqz	a5,580 <_write.constprop.0+0x24>
     578:	0807f793          	and	a5,a5,128
     57c:	e391                	bnez	a5,580 <_write.constprop.0+0x24>
     57e:	3fc9                	jal	550 <internal_handle_input.constprop.0>
     580:	40f2                	lw	ra,28(sp)
     582:	8522                	mv	a0,s0
     584:	4462                	lw	s0,24(sp)
     586:	44d2                	lw	s1,20(sp)
     588:	6105                	add	sp,sp,32
     58a:	8082                	ret
     58c:	409406b3          	sub	a3,s0,s1
     590:	461d                	li	a2,7
     592:	8736                	mv	a4,a3
     594:	00d65363          	bge	a2,a3,59a <_write.constprop.0+0x3e>
     598:	471d                	li	a4,7
     59a:	00027637          	lui	a2,0x27
     59e:	10160613          	add	a2,a2,257 # 27101 <main.c.9f50ad4d+0x247eb>
     5a2:	00032583          	lw	a1,0(t1)
     5a6:	0805f513          	and	a0,a1,128
     5aa:	ed3d                	bnez	a0,628 <_write.constprop.0+0xcc>
     5ac:	c981                	beqz	a1,5bc <_write.constprop.0+0x60>
     5ae:	c61a                	sw	t1,12(sp)
     5b0:	c43a                	sw	a4,8(sp)
     5b2:	c236                	sw	a3,4(sp)
     5b4:	3f71                	jal	550 <internal_handle_input.constprop.0>
     5b6:	4332                	lw	t1,12(sp)
     5b8:	4722                	lw	a4,8(sp)
     5ba:	4692                	lw	a3,4(sp)
     5bc:	0036a693          	slti	a3,a3,3
     5c0:	4601                	li	a2,0
     5c2:	e299                	bnez	a3,5c8 <_write.constprop.0+0x6c>
     5c4:	ffd70613          	add	a2,a4,-3
     5c8:	4782                	lw	a5,0(sp)
     5ca:	00348593          	add	a1,s1,3
     5ce:	0808                	add	a0,sp,16
     5d0:	95be                	add	a1,a1,a5
     5d2:	c41a                	sw	t1,8(sp)
     5d4:	c23a                	sw	a4,4(sp)
     5d6:	219d                	jal	a3c <memcpy>
     5d8:	4642                	lw	a2,16(sp)
     5da:	4782                	lw	a5,0(sp)
     5dc:	e00006b7          	lui	a3,0xe0000
     5e0:	4322                	lw	t1,8(sp)
     5e2:	4712                	lw	a4,4(sp)
     5e4:	0f868693          	add	a3,a3,248 # e00000f8 <__global_pointer$+0xbffff7f0>
     5e8:	c290                	sw	a2,0(a3)
     5ea:	458d                	li	a1,3
     5ec:	00978633          	add	a2,a5,s1
     5f0:	4681                	li	a3,0
     5f2:	00064283          	lbu	t0,0(a2)
     5f6:	0685                	add	a3,a3,1
     5f8:	01068793          	add	a5,a3,16
     5fc:	00278533          	add	a0,a5,sp
     600:	00550023          	sb	t0,0(a0)
     604:	00d70563          	beq	a4,a3,60e <_write.constprop.0+0xb2>
     608:	0605                	add	a2,a2,1
     60a:	feb694e3          	bne	a3,a1,5f2 <_write.constprop.0+0x96>
     60e:	00470693          	add	a3,a4,4
     612:	f806e693          	or	a3,a3,-128
     616:	00d10823          	sb	a3,16(sp)
     61a:	46c2                	lw	a3,16(sp)
     61c:	94ba                	add	s1,s1,a4
     61e:	00d32023          	sw	a3,0(t1)
     622:	f684c5e3          	blt	s1,s0,58c <_write.constprop.0+0x30>
     626:	bfa9                	j	580 <_write.constprop.0+0x24>
     628:	167d                	add	a2,a2,-1
     62a:	fe25                	bnez	a2,5a2 <_write.constprop.0+0x46>
     62c:	8426                	mv	s0,s1
     62e:	bf89                	j	580 <_write.constprop.0+0x24>
     630:	e0000337          	lui	t1,0xe0000
     634:	4481                	li	s1,0
     636:	0f430313          	add	t1,t1,244 # e00000f4 <__global_pointer$+0xbffff7ec>
     63a:	b7e5                	j	622 <_write.constprop.0+0xc6>

0000063c <__puts_uart>:
     63c:	1151                	add	sp,sp,-12
     63e:	c222                	sw	s0,4(sp)
     640:	c406                	sw	ra,8(sp)
     642:	842e                	mv	s0,a1
     644:	3f21                	jal	55c <_write.constprop.0>
     646:	40a2                	lw	ra,8(sp)
     648:	8522                	mv	a0,s0
     64a:	4412                	lw	s0,4(sp)
     64c:	0131                	add	sp,sp,12
     64e:	8082                	ret

00000650 <handle_reset>:
     650:	20000197          	auipc	gp,0x20000
     654:	2b818193          	add	gp,gp,696 # 20000908 <__global_pointer$>
     658:	ef818113          	add	sp,gp,-264 # 20000800 <_eusrstack>
     65c:	08000513          	li	a0,128
     660:	30051073          	csrw	mstatus,a0
     664:	468d                	li	a3,3
     666:	00000517          	auipc	a0,0x0
     66a:	99a50513          	add	a0,a0,-1638 # 0 <InterruptVector>
     66e:	8d55                	or	a0,a0,a3
     670:	30551073          	csrw	mtvec,a0
     674:	20000517          	auipc	a0,0x20000
     678:	a9450513          	add	a0,a0,-1388 # 20000108 <ssd1306_buffer>
     67c:	c0018593          	add	a1,gp,-1024 # 20000508 <_ebss>
     680:	4601                	li	a2,0
     682:	00b55663          	bge	a0,a1,68e <handle_reset+0x3e>
     686:	c110                	sw	a2,0(a0)
     688:	0511                	add	a0,a0,4
     68a:	feb54ee3          	blt	a0,a1,686 <handle_reset+0x36>
     68e:	00001517          	auipc	a0,0x1
     692:	1e650513          	add	a0,a0,486 # 1874 <_data_lma>
     696:	20000597          	auipc	a1,0x20000
     69a:	96a58593          	add	a1,a1,-1686 # 20000000 <car_s_3>
     69e:	20000617          	auipc	a2,0x20000
     6a2:	a6a60613          	add	a2,a2,-1430 # 20000108 <ssd1306_buffer>
     6a6:	00c58863          	beq	a1,a2,6b6 <handle_reset+0x66>
     6aa:	4114                	lw	a3,0(a0)
     6ac:	c194                	sw	a3,0(a1)
     6ae:	0511                	add	a0,a0,4
     6b0:	0591                	add	a1,a1,4
     6b2:	fec59ae3          	bne	a1,a2,6a6 <handle_reset+0x56>
     6b6:	e000f7b7          	lui	a5,0xe000f
     6ba:	4705                	li	a4,1
     6bc:	c398                	sw	a4,0(a5)
     6be:	6785                	lui	a5,0x1
     6c0:	e6078793          	add	a5,a5,-416 # e60 <main>
     6c4:	34179073          	csrw	mepc,a5
     6c8:	30200073          	mret

000006cc <ADC1_IRQHandler>:
     6cc:	a001                	j	6cc <ADC1_IRQHandler>

000006ce <NMI_Handler>:
     6ce:	40021737          	lui	a4,0x40021
     6d2:	471c                	lw	a5,8(a4)
     6d4:	008006b7          	lui	a3,0x800
     6d8:	8fd5                	or	a5,a5,a3
     6da:	c71c                	sw	a5,8(a4)

000006dc <strlen>:
     6dc:	87aa                	mv	a5,a0
     6de:	0007c703          	lbu	a4,0(a5)
     6e2:	e701                	bnez	a4,6ea <strlen+0xe>
     6e4:	40a78533          	sub	a0,a5,a0
     6e8:	8082                	ret
     6ea:	0785                	add	a5,a5,1
     6ec:	bfcd                	j	6de <strlen+0x2>

000006ee <mini_vpprintf>:
     6ee:	fa410113          	add	sp,sp,-92
     6f2:	caa2                	sw	s0,84(sp)
     6f4:	c8a6                	sw	s1,80(sp)
     6f6:	cc86                	sw	ra,88(sp)
     6f8:	c02a                	sw	a0,0(sp)
     6fa:	c22e                	sw	a1,4(sp)
     6fc:	8432                	mv	s0,a2
     6fe:	84b6                	mv	s1,a3
     700:	ca02                	sw	zero,20(sp)
     702:	00044783          	lbu	a5,0(s0)
     706:	00140693          	add	a3,s0,1
     70a:	00f10fa3          	sb	a5,31(sp)
     70e:	eb81                	bnez	a5,71e <mini_vpprintf+0x30>
     710:	40e6                	lw	ra,88(sp)
     712:	4456                	lw	s0,84(sp)
     714:	4552                	lw	a0,20(sp)
     716:	44c6                	lw	s1,80(sp)
     718:	05c10113          	add	sp,sp,92
     71c:	8082                	ret
     71e:	c636                	sw	a3,12(sp)
     720:	02500713          	li	a4,37
     724:	02e78063          	beq	a5,a4,744 <mini_vpprintf+0x56>
     728:	4612                	lw	a2,4(sp)
     72a:	4782                	lw	a5,0(sp)
     72c:	4585                	li	a1,1
     72e:	01f10513          	add	a0,sp,31
     732:	9782                	jalr	a5
     734:	46b2                	lw	a3,12(sp)
     736:	c426                	sw	s1,8(sp)
     738:	8436                	mv	s0,a3
     73a:	47d2                	lw	a5,20(sp)
     73c:	44a2                	lw	s1,8(sp)
     73e:	97aa                	add	a5,a5,a0
     740:	ca3e                	sw	a5,20(sp)
     742:	b7c1                	j	702 <mini_vpprintf+0x14>
     744:	00144703          	lbu	a4,1(s0)
     748:	03000613          	li	a2,48
     74c:	03000693          	li	a3,48
     750:	00e10fa3          	sb	a4,31(sp)
     754:	c632                	sw	a2,12(sp)
     756:	00240793          	add	a5,s0,2
     75a:	08d71263          	bne	a4,a3,7de <mini_vpprintf+0xf0>
     75e:	843e                	mv	s0,a5
     760:	4681                	li	a3,0
     762:	4781                	li	a5,0
     764:	45a5                	li	a1,9
     766:	a811                	j	77a <mini_vpprintf+0x8c>
     768:	00279713          	sll	a4,a5,0x2
     76c:	0405                	add	s0,s0,1
     76e:	97ba                	add	a5,a5,a4
     770:	fff44703          	lbu	a4,-1(s0)
     774:	0786                	sll	a5,a5,0x1
     776:	97b2                	add	a5,a5,a2
     778:	4685                	li	a3,1
     77a:	fd070613          	add	a2,a4,-48 # 40020fd0 <__global_pointer$+0x200206c8>
     77e:	0ff67513          	zext.b	a0,a2
     782:	fea5f3e3          	bgeu	a1,a0,768 <mini_vpprintf+0x7a>
     786:	c299                	beqz	a3,78c <mini_vpprintf+0x9e>
     788:	00e10fa3          	sb	a4,31(sp)
     78c:	c83e                	sw	a5,16(sp)
     78e:	46e1                	li	a3,24
     790:	00f6d363          	bge	a3,a5,796 <mini_vpprintf+0xa8>
     794:	c836                	sw	a3,16(sp)
     796:	06c00613          	li	a2,108
     79a:	4681                	li	a3,0
     79c:	00c71863          	bne	a4,a2,7ac <mini_vpprintf+0xbe>
     7a0:	00044703          	lbu	a4,0(s0)
     7a4:	4685                	li	a3,1
     7a6:	0405                	add	s0,s0,1
     7a8:	00e10fa3          	sb	a4,31(sp)
     7ac:	01f14603          	lbu	a2,31(sp)
     7b0:	06400713          	li	a4,100
     7b4:	06e60563          	beq	a2,a4,81e <mini_vpprintf+0x130>
     7b8:	02c76763          	bltu	a4,a2,7e6 <mini_vpprintf+0xf8>
     7bc:	05800793          	li	a5,88
     7c0:	0af60063          	beq	a2,a5,860 <mini_vpprintf+0x172>
     7c4:	06300793          	li	a5,99
     7c8:	0af60d63          	beq	a2,a5,882 <mini_vpprintf+0x194>
     7cc:	d231                	beqz	a2,710 <mini_vpprintf+0x22>
     7ce:	4612                	lw	a2,4(sp)
     7d0:	4782                	lw	a5,0(sp)
     7d2:	4585                	li	a1,1
     7d4:	01f10513          	add	a0,sp,31
     7d8:	9782                	jalr	a5
     7da:	c426                	sw	s1,8(sp)
     7dc:	bfb9                	j	73a <mini_vpprintf+0x4c>
     7de:	02000693          	li	a3,32
     7e2:	c636                	sw	a3,12(sp)
     7e4:	bfad                	j	75e <mini_vpprintf+0x70>
     7e6:	07500713          	li	a4,117
     7ea:	02e60a63          	beq	a2,a4,81e <mini_vpprintf+0x130>
     7ee:	07800713          	li	a4,120
     7f2:	06e60763          	beq	a2,a4,860 <mini_vpprintf+0x172>
     7f6:	07300713          	li	a4,115
     7fa:	fce61ae3          	bne	a2,a4,7ce <mini_vpprintf+0xe0>
     7fe:	cc3e                	sw	a5,24(sp)
     800:	00448793          	add	a5,s1,4
     804:	4084                	lw	s1,0(s1)
     806:	c43e                	sw	a5,8(sp)
     808:	8526                	mv	a0,s1
     80a:	3dc9                	jal	6dc <strlen>
     80c:	47e2                	lw	a5,24(sp)
     80e:	85aa                	mv	a1,a0
     810:	08f05663          	blez	a5,89c <mini_vpprintf+0x1ae>
     814:	46c2                	lw	a3,16(sp)
     816:	4632                	lw	a2,12(sp)
     818:	1838                	add	a4,sp,56
     81a:	8526                	mv	a0,s1
     81c:	a01d                	j	842 <mini_vpprintf+0x154>
     81e:	00448793          	add	a5,s1,4
     822:	c43e                	sw	a5,8(sp)
     824:	c695                	beqz	a3,850 <mini_vpprintf+0x162>
     826:	f8b60613          	add	a2,a2,-117
     82a:	1018                	add	a4,sp,32
     82c:	00163693          	seqz	a3,a2
     830:	4088                	lw	a0,0(s1)
     832:	4601                	li	a2,0
     834:	45a9                	li	a1,10
     836:	3a55                	jal	1ea <mini_itoa.part.0>
     838:	46c2                	lw	a3,16(sp)
     83a:	4632                	lw	a2,12(sp)
     83c:	1838                	add	a4,sp,56
     83e:	85aa                	mv	a1,a0
     840:	1008                	add	a0,sp,32
     842:	38d5                	jal	136 <mini_pad>
     844:	4612                	lw	a2,4(sp)
     846:	85aa                	mv	a1,a0
     848:	1828                	add	a0,sp,56
     84a:	4782                	lw	a5,0(sp)
     84c:	9782                	jalr	a5
     84e:	b5f5                	j	73a <mini_vpprintf+0x4c>
     850:	07500793          	li	a5,117
     854:	1018                	add	a4,sp,32
     856:	4685                	li	a3,1
     858:	fcf60ce3          	beq	a2,a5,830 <mini_vpprintf+0x142>
     85c:	4681                	li	a3,0
     85e:	bfc9                	j	830 <mini_vpprintf+0x142>
     860:	4088                	lw	a0,0(s1)
     862:	fa860613          	add	a2,a2,-88
     866:	00448793          	add	a5,s1,4
     86a:	1018                	add	a4,sp,32
     86c:	4685                	li	a3,1
     86e:	00163613          	seqz	a2,a2
     872:	45c1                	li	a1,16
     874:	c43e                	sw	a5,8(sp)
     876:	3a95                	jal	1ea <mini_itoa.part.0>
     878:	46c2                	lw	a3,16(sp)
     87a:	4632                	lw	a2,12(sp)
     87c:	85aa                	mv	a1,a0
     87e:	1838                	add	a4,sp,56
     880:	b7c1                	j	840 <mini_vpprintf+0x152>
     882:	00448793          	add	a5,s1,4
     886:	c43e                	sw	a5,8(sp)
     888:	409c                	lw	a5,0(s1)
     88a:	46c2                	lw	a3,16(sp)
     88c:	4632                	lw	a2,12(sp)
     88e:	00f10fa3          	sb	a5,31(sp)
     892:	1838                	add	a4,sp,56
     894:	4585                	li	a1,1
     896:	01f10513          	add	a0,sp,31
     89a:	b765                	j	842 <mini_vpprintf+0x154>
     89c:	4612                	lw	a2,4(sp)
     89e:	8526                	mv	a0,s1
     8a0:	b76d                	j	84a <mini_vpprintf+0x15c>

000008a2 <printf>:
     8a2:	fdc10113          	add	sp,sp,-36
     8a6:	ca32                	sw	a2,20(sp)
     8a8:	862a                	mv	a2,a0
     8aa:	c82e                	sw	a1,16(sp)
     8ac:	cc36                	sw	a3,24(sp)
     8ae:	4581                	li	a1,0
     8b0:	0814                	add	a3,sp,16
     8b2:	63c00513          	li	a0,1596
     8b6:	c606                	sw	ra,12(sp)
     8b8:	ce3a                	sw	a4,28(sp)
     8ba:	d03e                	sw	a5,32(sp)
     8bc:	c036                	sw	a3,0(sp)
     8be:	3d05                	jal	6ee <mini_vpprintf>
     8c0:	40b2                	lw	ra,12(sp)
     8c2:	02410113          	add	sp,sp,36
     8c6:	8082                	ret

000008c8 <ssd1306_i2c_error.isra.0>:
 * error handler
 */
uint8_t ssd1306_i2c_error(uint8_t err)
{
	// report error
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     8c8:	6785                	lui	a5,0x1
     8ca:	050a                	sll	a0,a0,0x2
     8cc:	11c78793          	add	a5,a5,284 # 111c <errstr>
     8d0:	97aa                	add	a5,a5,a0
     8d2:	438c                	lw	a1,0(a5)
     8d4:	6505                	lui	a0,0x1
uint8_t ssd1306_i2c_error(uint8_t err)
     8d6:	1151                	add	sp,sp,-12
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     8d8:	0a450513          	add	a0,a0,164 # 10a4 <main+0x244>
uint8_t ssd1306_i2c_error(uint8_t err)
     8dc:	c406                	sw	ra,8(sp)
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     8de:	37d1                	jal	8a2 <printf>
	
	// reset & initialize I2C
	ssd1306_i2c_setup();

	return 1;
}
     8e0:	40a2                	lw	ra,8(sp)
     8e2:	0131                	add	sp,sp,12
	ssd1306_i2c_setup();
     8e4:	b2d9                	j	2aa <ssd1306_i2c_setup>

000008e6 <ssd1306_i2c_send.constprop.0.isra.0>:
uint8_t ssd1306_i2c_send(uint8_t addr, uint8_t *data, uint8_t sz)
{
	int32_t timeout;
	
	// wait for not busy
	timeout = TIMEOUT_MAX;
     8e6:	6761                	lui	a4,0x18
	while((I2C1->STAR2 & I2C_STAR2_BUSY) && (timeout--));
     8e8:	400057b7          	lui	a5,0x40005
	timeout = TIMEOUT_MAX;
     8ec:	6a070713          	add	a4,a4,1696 # 186a0 <main.c.9f50ad4d+0x15d8a>
	while((I2C1->STAR2 & I2C_STAR2_BUSY) && (timeout--));
     8f0:	40078793          	add	a5,a5,1024 # 40005400 <__global_pointer$+0x20004af8>
     8f4:	567d                	li	a2,-1
     8f6:	0187d683          	lhu	a3,24(a5)
     8fa:	8a89                	and	a3,a3,2
     8fc:	c2f1                	beqz	a3,9c0 <ssd1306_i2c_send.constprop.0.isra.0+0xda>
     8fe:	177d                	add	a4,a4,-1
     900:	fec71be3          	bne	a4,a2,8f6 <ssd1306_i2c_send.constprop.0.isra.0+0x10>
	if(timeout==-1)
		return ssd1306_i2c_error(0);
     904:	4501                	li	a0,0
     906:	a01d                	j	92c <ssd1306_i2c_send.constprop.0.isra.0+0x46>
	// send data one byte at a time
	while(sz--)
	{
		// wait for TX Empty
		timeout = TIMEOUT_MAX;
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     908:	40005737          	lui	a4,0x40005
	while(sz--)
     90c:	95aa                	add	a1,a1,a0
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     90e:	40070713          	add	a4,a4,1024 # 40005400 <__global_pointer$+0x20004af8>
	while(sz--)
     912:	0ff5f593          	zext.b	a1,a1
     916:	67e1                	lui	a5,0x18
     918:	6a178793          	add	a5,a5,1697 # 186a1 <main.c.9f50ad4d+0x15d8b>
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     91c:	01475683          	lhu	a3,20(a4)
     920:	0806f693          	and	a3,a3,128
     924:	e689                	bnez	a3,92e <ssd1306_i2c_send.constprop.0.isra.0+0x48>
     926:	17fd                	add	a5,a5,-1
     928:	fbf5                	bnez	a5,91c <ssd1306_i2c_send.constprop.0.isra.0+0x36>
		if(timeout==-1)
			return ssd1306_i2c_error(3);
     92a:	450d                	li	a0,3
		return ssd1306_i2c_error(0);
     92c:	bf71                	j	8c8 <ssd1306_i2c_error.isra.0>
		
		// send command
		I2C1->DATAR = *data++;
     92e:	00054783          	lbu	a5,0(a0)
     932:	0505                	add	a0,a0,1
     934:	00f71823          	sh	a5,16(a4)
	while(sz--)
     938:	0ff57793          	zext.b	a5,a0
     93c:	fcf59de3          	bne	a1,a5,916 <ssd1306_i2c_send.constprop.0.isra.0+0x30>
	}

	// wait for tx complete
	timeout = TIMEOUT_MAX;
     940:	66e1                	lui	a3,0x18
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     942:	40005737          	lui	a4,0x40005
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (timeout--));
     946:	00070637          	lui	a2,0x70
	timeout = TIMEOUT_MAX;
     94a:	6a068693          	add	a3,a3,1696 # 186a0 <main.c.9f50ad4d+0x15d8a>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     94e:	40070713          	add	a4,a4,1024 # 40005400 <__global_pointer$+0x20004af8>
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (timeout--));
     952:	08460613          	add	a2,a2,132 # 70084 <main.c.9f50ad4d+0x6d76e>
     956:	55fd                	li	a1,-1
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     958:	01475503          	lhu	a0,20(a4)
     95c:	01875783          	lhu	a5,24(a4)
     960:	07c2                	sll	a5,a5,0x10
     962:	8fc9                	or	a5,a5,a0
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (timeout--));
     964:	8ff1                	and	a5,a5,a2
     966:	00c78763          	beq	a5,a2,974 <ssd1306_i2c_send.constprop.0.isra.0+0x8e>
     96a:	16fd                	add	a3,a3,-1
     96c:	feb696e3          	bne	a3,a1,958 <ssd1306_i2c_send.constprop.0.isra.0+0x72>
	if(timeout==-1)
		return ssd1306_i2c_error(4);
     970:	4511                	li	a0,4
     972:	bf6d                	j	92c <ssd1306_i2c_send.constprop.0.isra.0+0x46>

	// set STOP condition
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     974:	00075783          	lhu	a5,0(a4)
     978:	2007e793          	or	a5,a5,512
     97c:	00f71023          	sh	a5,0(a4)
	
	// we're happy
	return 0;
}
     980:	8082                	ret
	I2C1->DATAR = addr<<1;
     982:	07800793          	li	a5,120
     986:	00f71823          	sh	a5,16(a4)
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     98a:	40005637          	lui	a2,0x40005
	timeout = TIMEOUT_MAX;
     98e:	6761                	lui	a4,0x18
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     990:	000706b7          	lui	a3,0x70
	timeout = TIMEOUT_MAX;
     994:	6a070713          	add	a4,a4,1696 # 186a0 <main.c.9f50ad4d+0x15d8a>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     998:	40060613          	add	a2,a2,1024 # 40005400 <__global_pointer$+0x20004af8>
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     99c:	08268693          	add	a3,a3,130 # 70082 <main.c.9f50ad4d+0x6d76c>
     9a0:	537d                	li	t1,-1
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     9a2:	01465283          	lhu	t0,20(a2)
     9a6:	01865783          	lhu	a5,24(a2)
     9aa:	07c2                	sll	a5,a5,0x10
     9ac:	0057e7b3          	or	a5,a5,t0
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     9b0:	8ff5                	and	a5,a5,a3
     9b2:	f4d78be3          	beq	a5,a3,908 <ssd1306_i2c_send.constprop.0.isra.0+0x22>
     9b6:	177d                	add	a4,a4,-1
     9b8:	fe6715e3          	bne	a4,t1,9a2 <ssd1306_i2c_send.constprop.0.isra.0+0xbc>
		return ssd1306_i2c_error(2);
     9bc:	4509                	li	a0,2
     9be:	b7bd                	j	92c <ssd1306_i2c_send.constprop.0.isra.0+0x46>
	I2C1->CTLR1 |= I2C_CTLR1_START;
     9c0:	0007d703          	lhu	a4,0(a5)
	timeout = TIMEOUT_MAX;
     9c4:	66e1                	lui	a3,0x18
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_MODE_SELECT)) && (timeout--));
     9c6:	00030637          	lui	a2,0x30
	I2C1->CTLR1 |= I2C_CTLR1_START;
     9ca:	10076713          	or	a4,a4,256
     9ce:	00e79023          	sh	a4,0(a5)
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     9d2:	40005737          	lui	a4,0x40005
	timeout = TIMEOUT_MAX;
     9d6:	6a068693          	add	a3,a3,1696 # 186a0 <main.c.9f50ad4d+0x15d8a>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     9da:	40070713          	add	a4,a4,1024 # 40005400 <__global_pointer$+0x20004af8>
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_MODE_SELECT)) && (timeout--));
     9de:	0605                	add	a2,a2,1 # 30001 <main.c.9f50ad4d+0x2d6eb>
     9e0:	537d                	li	t1,-1
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     9e2:	01475283          	lhu	t0,20(a4)
     9e6:	01875783          	lhu	a5,24(a4)
     9ea:	07c2                	sll	a5,a5,0x10
     9ec:	0057e7b3          	or	a5,a5,t0
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_MODE_SELECT)) && (timeout--));
     9f0:	8ff1                	and	a5,a5,a2
     9f2:	f8c788e3          	beq	a5,a2,982 <ssd1306_i2c_send.constprop.0.isra.0+0x9c>
     9f6:	16fd                	add	a3,a3,-1
     9f8:	fe6695e3          	bne	a3,t1,9e2 <ssd1306_i2c_send.constprop.0.isra.0+0xfc>
		return ssd1306_i2c_error(1);
     9fc:	4505                	li	a0,1
     9fe:	b73d                	j	92c <ssd1306_i2c_send.constprop.0.isra.0+0x46>

00000a00 <ssd1306_cmd>:
{
     a00:	7179                	add	sp,sp,-48
	
	/* build command or data packets */
	if(cmd)
	{
		pkt[0] = 0;
		pkt[1] = *data;
     a02:	00a100a3          	sb	a0,1(sp)
	else
	{
		pkt[0] = 0x40;
		memcpy(&pkt[1], data, sz);
	}
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     a06:	4589                	li	a1,2
     a08:	850a                	mv	a0,sp
     a0a:	d606                	sw	ra,44(sp)
		pkt[0] = 0;
     a0c:	00010023          	sb	zero,0(sp)
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     a10:	3dd9                	jal	8e6 <ssd1306_i2c_send.constprop.0.isra.0>
}
     a12:	50b2                	lw	ra,44(sp)
     a14:	4501                	li	a0,0
     a16:	6145                	add	sp,sp,48
     a18:	8082                	ret

00000a1a <memset>:
     a1a:	962a                	add	a2,a2,a0
     a1c:	87aa                	mv	a5,a0
     a1e:	00c79363          	bne	a5,a2,a24 <memset+0xa>
     a22:	8082                	ret
     a24:	00b78023          	sb	a1,0(a5)
     a28:	0785                	add	a5,a5,1
     a2a:	bfd5                	j	a1e <memset+0x4>

00000a2c <ssd1306_setbuf.constprop.0>:
	memset(ssd1306_buffer, color ? 0xFF : 0x00, sizeof(ssd1306_buffer));
     a2c:	20000537          	lui	a0,0x20000
     a30:	40000613          	li	a2,1024
     a34:	4581                	li	a1,0
     a36:	10850513          	add	a0,a0,264 # 20000108 <ssd1306_buffer>
     a3a:	b7c5                	j	a1a <memset>

00000a3c <memcpy>:
     a3c:	4781                	li	a5,0
     a3e:	00f61363          	bne	a2,a5,a44 <memcpy+0x8>
     a42:	8082                	ret
     a44:	00f58733          	add	a4,a1,a5
     a48:	00074683          	lbu	a3,0(a4)
     a4c:	00f50733          	add	a4,a0,a5
     a50:	0785                	add	a5,a5,1
     a52:	00d70023          	sb	a3,0(a4)
     a56:	b7e5                	j	a3e <memcpy+0x2>

00000a58 <ssd1306_refresh>:
{
     a58:	7179                	add	sp,sp,-48
	ssd1306_cmd(SSD1306_COLUMNADDR);
     a5a:	02100513          	li	a0,33
{
     a5e:	d606                	sw	ra,44(sp)
     a60:	d422                	sw	s0,40(sp)
     a62:	d226                	sw	s1,36(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
     a64:	3f71                	jal	a00 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
     a66:	4501                	li	a0,0
     a68:	3f61                	jal	a00 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
     a6a:	07f00513          	li	a0,127
     a6e:	3f49                	jal	a00 <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
     a70:	02200513          	li	a0,34
     a74:	3771                	jal	a00 <ssd1306_cmd>
	ssd1306_cmd(0); // Page start address (0 = reset)
     a76:	4501                	li	a0,0
     a78:	3761                	jal	a00 <ssd1306_cmd>
	ssd1306_cmd(7); // Page end address
     a7a:	20000437          	lui	s0,0x20000
     a7e:	451d                	li	a0,7
     a80:	10840413          	add	s0,s0,264 # 20000108 <ssd1306_buffer>
     a84:	3fb5                	jal	a00 <ssd1306_cmd>
    for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ)
     a86:	40040493          	add	s1,s0,1024
		pkt[0] = 0x40;
     a8a:	04000793          	li	a5,64
		memcpy(&pkt[1], data, sz);
     a8e:	85a2                	mv	a1,s0
     a90:	02000613          	li	a2,32
     a94:	00110513          	add	a0,sp,1
		pkt[0] = 0x40;
     a98:	00f10023          	sb	a5,0(sp)
		memcpy(&pkt[1], data, sz);
     a9c:	3745                	jal	a3c <memcpy>
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     a9e:	02100593          	li	a1,33
     aa2:	850a                	mv	a0,sp
     aa4:	02040413          	add	s0,s0,32
     aa8:	3d3d                	jal	8e6 <ssd1306_i2c_send.constprop.0.isra.0>
     aaa:	fe9410e3          	bne	s0,s1,a8a <ssd1306_refresh+0x32>
}
     aae:	50b2                	lw	ra,44(sp)
     ab0:	5422                	lw	s0,40(sp)
     ab2:	5492                	lw	s1,36(sp)
     ab4:	6145                	add	sp,sp,48
     ab6:	8082                	ret

00000ab8 <game_loop>:
  {5,25,20,4,true},
  {5,0,10,4,false}
};

bool game_loop(car_state_data car_s[])
{
     ab8:	fbc10113          	add	sp,sp,-68
     abc:	de22                	sw	s0,60(sp)
  bool flip_flag = false;

  bool button_state = false;

  uint8_t rot_a_pre_state = GPIO_digitalRead(ROT_A_PIN);
  uint8_t rot_b_pre_state = GPIO_digitalRead(ROT_B_PIN);
     abe:	400117b7          	lui	a5,0x40011
  uint8_t rot_a_pre_state = GPIO_digitalRead(ROT_A_PIN);
     ac2:	40011437          	lui	s0,0x40011
     ac6:	40040413          	add	s0,s0,1024 # 40011400 <__global_pointer$+0x20010af8>
  uint8_t rot_b_pre_state = GPIO_digitalRead(ROT_B_PIN);
     aca:	80078793          	add	a5,a5,-2048 # 40010800 <__global_pointer$+0x2000fef8>
  uint8_t rot_a_pre_state = GPIO_digitalRead(ROT_A_PIN);
     ace:	4414                	lw	a3,8(s0)
  uint8_t rot_b_pre_state = GPIO_digitalRead(ROT_B_PIN);
     ad0:	479c                	lw	a5,8(a5)
  int newt_x = 100;
     ad2:	06400613          	li	a2,100
  uint8_t rot_a_pre_state = GPIO_digitalRead(ROT_A_PIN);
     ad6:	8295                	srl	a3,a3,0x5
  uint8_t rot_b_pre_state = GPIO_digitalRead(ROT_B_PIN);
     ad8:	8389                	srl	a5,a5,0x2
{
     ada:	dc26                	sw	s1,56(sp)
     adc:	c086                	sw	ra,64(sp)
     ade:	cc2a                	sw	a0,24(sp)
  uint8_t rot_a_pre_state = GPIO_digitalRead(ROT_A_PIN);
     ae0:	8a85                	and	a3,a3,1
  uint8_t rot_b_pre_state = GPIO_digitalRead(ROT_B_PIN);
     ae2:	8b85                	and	a5,a5,1
  bool button_state = false;
     ae4:	4701                	li	a4,0
  bool flip_flag = false;
     ae6:	c402                	sw	zero,8(sp)
  int flip_c = 0;
     ae8:	c202                	sw	zero,4(sp)
  int newt_y = 20;
     aea:	44d1                	li	s1,20
  int newt_x = 100;
     aec:	c032                	sw	a2,0(sp)

  while (1) {

    uint8_t button_is_pressed = !GPIO_digitalRead(BTN_PIN);
     aee:	40011637          	lui	a2,0x40011
     af2:	4610                	lw	a2,8(a2)
     af4:	8a41                	and	a2,a2,16
     af6:	c832                	sw	a2,16(sp)

    // buzzer on!
    if (button_is_pressed)
     af8:	ea05                	bnez	a2,b28 <game_loop+0x70>
    {
        GPIO_digitalWrite(BZR_PIN, high);
     afa:	04000713          	li	a4,64
     afe:	c818                	sw	a4,16(s0)
      newt_x -= newt_step;
    }
    button_state = button_is_pressed;

    // get rotaly-encoder value
    uint8_t rot_a_state = GPIO_digitalRead(ROT_A_PIN);
     b00:	4418                	lw	a4,8(s0)
     b02:	8315                	srl	a4,a4,0x5
     b04:	8b05                	and	a4,a4,1
     b06:	ca3a                	sw	a4,20(sp)
    uint8_t rot_b_state = GPIO_digitalRead(ROT_B_PIN);
     b08:	40011737          	lui	a4,0x40011
     b0c:	80070713          	add	a4,a4,-2048 # 40010800 <__global_pointer$+0x2000fef8>
     b10:	4718                	lw	a4,8(a4)
     b12:	8309                	srl	a4,a4,0x2
     b14:	8b05                	and	a4,a4,1
     b16:	c63a                	sw	a4,12(sp)

    if (rot_a_state && rot_b_state) {
     b18:	4752                	lw	a4,20(sp)
     b1a:	c315                	beqz	a4,b3e <game_loop+0x86>
     b1c:	4732                	lw	a4,12(sp)
     b1e:	c70d                	beqz	a4,b48 <game_loop+0x90>
      if (!rot_a_pre_state && rot_b_pre_state) {
     b20:	ee81                	bnez	a3,b38 <game_loop+0x80>
     b22:	c39d                	beqz	a5,b48 <game_loop+0x90>
    
    if (!rot_a_state && !rot_b_state) {
      if (!rot_a_pre_state && rot_b_pre_state) {
        newt_y -= 4;
      } else if (rot_a_pre_state && !rot_b_pre_state) {
        newt_y += 4;
     b24:	0491                	add	s1,s1,4
     b26:	a00d                	j	b48 <game_loop+0x90>
        GPIO_digitalWrite(BZR_PIN, low);
     b28:	00400637          	lui	a2,0x400
     b2c:	c810                	sw	a2,16(s0)
    if (button_state && !button_is_pressed){
     b2e:	db69                	beqz	a4,b00 <game_loop+0x48>
      newt_x -= newt_step;
     b30:	4702                	lw	a4,0(sp)
     b32:	171d                	add	a4,a4,-25
     b34:	c03a                	sw	a4,0(sp)
     b36:	b7e9                	j	b00 <game_loop+0x48>
      } else if (rot_a_pre_state && !rot_b_pre_state) {
     b38:	eb81                	bnez	a5,b48 <game_loop+0x90>
        newt_y -= 4;
     b3a:	14f1                	add	s1,s1,-4
     b3c:	a031                	j	b48 <game_loop+0x90>
    if (!rot_a_state && !rot_b_state) {
     b3e:	4732                	lw	a4,12(sp)
     b40:	e701                	bnez	a4,b48 <game_loop+0x90>
      if (!rot_a_pre_state && rot_b_pre_state) {
     b42:	0c069c63          	bnez	a3,c1a <game_loop+0x162>
     b46:	fbf5                	bnez	a5,b3a <game_loop+0x82>
    rot_b_pre_state = rot_b_state;

    if (newt_y < 0) {
      newt_y = 0;
    } 
    else if (newt_y > 40) {
     b48:	02800793          	li	a5,40
     b4c:	0c97da63          	bge	a5,s1,c20 <game_loop+0x168>
     b50:	02800493          	li	s1,40
      newt_y = 40;
    }

    // clear buffer for next mode
    ssd1306_setbuf(0);
     b54:	3de1                	jal	a2c <ssd1306_setbuf.constprop.0>

    flip_c ++;
     b56:	4792                	lw	a5,4(sp)
     b58:	0785                	add	a5,a5,1
     b5a:	c23e                	sw	a5,4(sp)

    if (flip_c > 100) {
     b5c:	4712                	lw	a4,4(sp)
     b5e:	06500793          	li	a5,101
     b62:	00f71763          	bne	a4,a5,b70 <game_loop+0xb8>
      flip_flag = !flip_flag;
     b66:	47a2                	lw	a5,8(sp)
      flip_c = 0;
     b68:	c202                	sw	zero,4(sp)
      flip_flag = !flip_flag;
     b6a:	0017c793          	xor	a5,a5,1
     b6e:	c43e                	sw	a5,8(sp)
    }

    if(flip_flag){
     b70:	47a2                	lw	a5,8(sp)
     b72:	cbdd                	beqz	a5,c28 <game_loop+0x170>
      ssd1306_drawImage(newt_x, newt_y, newt_left, 24, 24, 0);
     b74:	6609                	lui	a2,0x2
     b76:	4781                	li	a5,0
     b78:	4761                	li	a4,24
     b7a:	46e1                	li	a3,24
     b7c:	82c60613          	add	a2,a2,-2004 # 182c <newt_left>
    } else {
      ssd1306_drawImage(newt_x, newt_y, newt_right, 24, 24, 0);
     b80:	4502                	lw	a0,0(sp)
     b82:	85a6                	mv	a1,s1
     b84:	f7aff0ef          	jal	2fe <ssd1306_drawImage>
    }
    
    int car_n = car_s[0].car_n;
     b88:	47e2                	lw	a5,24(sp)

      // 車を描画
      ssd1306_drawImage(car_s[i].car_x, car_s[i].car_y, car, 24, 24, 0);

      // 車を進める
      if (flip_c % 25 == 0) {
     b8a:	4512                	lw	a0,4(sp)
     b8c:	45e5                	li	a1,25
    int car_n = car_s[0].car_n;
     b8e:	439c                	lw	a5,0(a5)
     b90:	d03e                	sw	a5,32(sp)
      if (flip_c % 25 == 0) {
     b92:	d7eff0ef          	jal	110 <__modsi3>
     b96:	47e2                	lw	a5,24(sp)
     b98:	ce2a                	sw	a0,28(sp)
    for (int i = 0; i < car_n; i++){
     b9a:	4381                	li	t2,0
     b9c:	00478293          	add	t0,a5,4
     ba0:	5782                	lw	a5,32(sp)
     ba2:	08f3ca63          	blt	t2,a5,c36 <game_loop+0x17e>
        }
      }
    }

    // 道の端に着いたらクリア
    if (newt_x < 0) {
     ba6:	4782                	lw	a5,0(sp)
     ba8:	1c07de63          	bgez	a5,d84 <game_loop+0x2cc>
    ssd1306_setbuf(0);
     bac:	3541                	jal	a2c <ssd1306_setbuf.constprop.0>
    ssd1306_drawImage(40, 0, clear, 40, 64, 0);
     bae:	6605                	lui	a2,0x1
     bb0:	04000713          	li	a4,64
     bb4:	02800693          	li	a3,40
     bb8:	65c60613          	add	a2,a2,1628 # 165c <clear>
     bbc:	4581                	li	a1,0
     bbe:	4781                	li	a5,0
     bc0:	02800513          	li	a0,40
     bc4:	f3aff0ef          	jal	2fe <ssd1306_drawImage>
    GPIO_digitalWrite(BZR_PIN, high);
     bc8:	40011437          	lui	s0,0x40011
    ssd1306_refresh();
     bcc:	3571                	jal	a58 <ssd1306_refresh>
    GPIO_digitalWrite(BZR_PIN, high);
     bce:	40040413          	add	s0,s0,1024 # 40011400 <__global_pointer$+0x20010af8>
     bd2:	04000793          	li	a5,64
    Delay_Ms(300);
     bd6:	001b7537          	lui	a0,0x1b7
    GPIO_digitalWrite(BZR_PIN, high);
     bda:	c81c                	sw	a5,16(s0)
    Delay_Ms(300);
     bdc:	74050513          	add	a0,a0,1856 # 1b7740 <main.c.9f50ad4d+0x1b4e2a>
     be0:	df4ff0ef          	jal	1d4 <DelaySysTick>
    GPIO_digitalWrite(BZR_PIN, low);
     be4:	004004b7          	lui	s1,0x400
    Delay_Ms(300);
     be8:	001b7537          	lui	a0,0x1b7
     bec:	74050513          	add	a0,a0,1856 # 1b7740 <main.c.9f50ad4d+0x1b4e2a>
    GPIO_digitalWrite(BZR_PIN, low);
     bf0:	c804                	sw	s1,16(s0)
    Delay_Ms(300);
     bf2:	de2ff0ef          	jal	1d4 <DelaySysTick>
    GPIO_digitalWrite(BZR_PIN, high);
     bf6:	04000793          	li	a5,64
    Delay_Ms(800);
     bfa:	00494537          	lui	a0,0x494
    GPIO_digitalWrite(BZR_PIN, high);
     bfe:	c81c                	sw	a5,16(s0)
    Delay_Ms(800);
     c00:	e0050513          	add	a0,a0,-512 # 493e00 <main.c.9f50ad4d+0x4914ea>
     c04:	dd0ff0ef          	jal	1d4 <DelaySysTick>
	  Delay_Ms(2000);
     c08:	00b72537          	lui	a0,0xb72
     c0c:	b0050513          	add	a0,a0,-1280 # b71b00 <main.c.9f50ad4d+0xb6f1ea>
    GPIO_digitalWrite(BZR_PIN, low);
     c10:	c804                	sw	s1,16(s0)
	  Delay_Ms(2000);
     c12:	dc2ff0ef          	jal	1d4 <DelaySysTick>
      show_clear();
      return true;
     c16:	4505                	li	a0,1
}
     c18:	aaa9                	j	d72 <game_loop+0x2ba>
      } else if (rot_a_pre_state && !rot_b_pre_state) {
     c1a:	f20797e3          	bnez	a5,b48 <game_loop+0x90>
     c1e:	b719                	j	b24 <game_loop+0x6c>
     c20:	f204dae3          	bgez	s1,b54 <game_loop+0x9c>
     c24:	4481                	li	s1,0
     c26:	b73d                	j	b54 <game_loop+0x9c>
      ssd1306_drawImage(newt_x, newt_y, newt_right, 24, 24, 0);
     c28:	6605                	lui	a2,0x1
     c2a:	4781                	li	a5,0
     c2c:	4761                	li	a4,24
     c2e:	46e1                	li	a3,24
     c30:	7e460613          	add	a2,a2,2020 # 17e4 <newt_right>
     c34:	b7b1                	j	b80 <game_loop+0xc8>
      ssd1306_drawImage(car_s[i].car_x, car_s[i].car_y, car, 24, 24, 0);
     c36:	0042a583          	lw	a1,4(t0)
     c3a:	0002a503          	lw	a0,0(t0)
     c3e:	6605                	lui	a2,0x1
     c40:	4781                	li	a5,0
     c42:	4761                	li	a4,24
     c44:	46e1                	li	a3,24
     c46:	79c60613          	add	a2,a2,1948 # 179c <car>
     c4a:	d41e                	sw	t2,40(sp)
     c4c:	d216                	sw	t0,36(sp)
     c4e:	eb0ff0ef          	jal	2fe <ssd1306_drawImage>
      if (flip_c % 25 == 0) {
     c52:	47f2                	lw	a5,28(sp)
     c54:	5292                	lw	t0,36(sp)
     c56:	53a2                	lw	t2,40(sp)
     c58:	eb99                	bnez	a5,c6e <game_loop+0x1b6>
        if (car_s[i].dest) {
     c5a:	00c2c683          	lbu	a3,12(t0)
          car_s[i].car_y += car_s[i].car_step;
     c5e:	0042a783          	lw	a5,4(t0)
     c62:	0082a703          	lw	a4,8(t0)
        if (car_s[i].dest) {
     c66:	ce91                	beqz	a3,c82 <game_loop+0x1ca>
          car_s[i].car_y += car_s[i].car_step;
     c68:	97ba                	add	a5,a5,a4
          car_s[i].car_y -= car_s[i].car_step;
     c6a:	00f2a223          	sw	a5,4(t0)
      if (car_s[i].car_y > 61) {
     c6e:	0042a703          	lw	a4,4(t0)
     c72:	03d00793          	li	a5,61
     c76:	00e7d863          	bge	a5,a4,c86 <game_loop+0x1ce>
        car_s[i].car_y = -21;
     c7a:	57ad                	li	a5,-21
        car_s[i].car_y = 61;
     c7c:	00f2a223          	sw	a5,4(t0)
     c80:	a031                	j	c8c <game_loop+0x1d4>
          car_s[i].car_y -= car_s[i].car_step;
     c82:	8f99                	sub	a5,a5,a4
     c84:	b7dd                	j	c6a <game_loop+0x1b2>
      if (car_s[i].car_y < -21) {
     c86:	56ad                	li	a3,-21
     c88:	fed74ae3          	blt	a4,a3,c7c <game_loop+0x1c4>
      if (car_s[i].car_x == newt_x) {
     c8c:	0002a783          	lw	a5,0(t0)
     c90:	4702                	lw	a4,0(sp)
     c92:	0ee79663          	bne	a5,a4,d7e <game_loop+0x2c6>
          (car_s[i].car_y + 7) <= newt_y && (car_s[i].car_y + 17) >= newt_y 
     c96:	0042a783          	lw	a5,4(t0)
     c9a:	00678713          	add	a4,a5,6
        if (
     c9e:	00975663          	bge	a4,s1,caa <game_loop+0x1f2>
          (car_s[i].car_y + 7) <= newt_y && (car_s[i].car_y + 17) >= newt_y 
     ca2:	01178713          	add	a4,a5,17
     ca6:	00975863          	bge	a4,s1,cb6 <game_loop+0x1fe>
          (car_s[i].car_y + 7) <= (newt_y + 17) && (car_s[i].car_y + 17) >= (newt_y + 17)
     caa:	00a48713          	add	a4,s1,10 # 40000a <main.c.9f50ad4d+0x3fd6f4>
          ||
     cae:	0cf74863          	blt	a4,a5,d7e <game_loop+0x2c6>
          (car_s[i].car_y + 7) <= (newt_y + 17) && (car_s[i].car_y + 17) >= (newt_y + 17)
     cb2:	0c97c663          	blt	a5,s1,d7e <game_loop+0x2c6>
     cb6:	5401                	li	s0,-32
      ssd1306_drawImage(20, 0, game_over_img, 32, 64, 0);
     cb8:	6485                	lui	s1,0x1
      ssd1306_setbuf(0);
     cba:	3b8d                	jal	a2c <ssd1306_setbuf.constprop.0>
      ssd1306_drawImage(20, 0, game_over_img, 32, 64, 0);
     cbc:	4781                	li	a5,0
     cbe:	04000713          	li	a4,64
     cc2:	02000693          	li	a3,32
     cc6:	55c48613          	add	a2,s1,1372 # 155c <game_over_img>
     cca:	4581                	li	a1,0
     ccc:	4551                	li	a0,20
     cce:	e30ff0ef          	jal	2fe <ssd1306_drawImage>
      ssd1306_drawImage(55, i, go_car_img, 32, 50, 0);
     cd2:	6605                	lui	a2,0x1
     cd4:	4781                	li	a5,0
     cd6:	85a2                	mv	a1,s0
     cd8:	03200713          	li	a4,50
     cdc:	02000693          	li	a3,32
     ce0:	49460613          	add	a2,a2,1172 # 1494 <go_car_img>
     ce4:	03700513          	li	a0,55
     ce8:	e16ff0ef          	jal	2fe <ssd1306_drawImage>
      ssd1306_refresh();
     cec:	33b5                	jal	a58 <ssd1306_refresh>
    for (int i = -32; i < 64; i++) {
     cee:	0405                	add	s0,s0,1
     cf0:	04000793          	li	a5,64
     cf4:	fcf413e3          	bne	s0,a5,cba <game_loop+0x202>
      GPIO_digitalWrite(BZR_PIN, high);
     cf8:	40011437          	lui	s0,0x40011
     cfc:	03200493          	li	s1,50
     d00:	40040413          	add	s0,s0,1024 # 40011400 <__global_pointer$+0x20010af8>
     d04:	04000793          	li	a5,64
      Delay_Ms(1);
     d08:	6505                	lui	a0,0x1
      GPIO_digitalWrite(BZR_PIN, high);
     d0a:	c81c                	sw	a5,16(s0)
      Delay_Ms(1);
     d0c:	77050513          	add	a0,a0,1904 # 1770 <clear+0x114>
     d10:	cc4ff0ef          	jal	1d4 <DelaySysTick>
      GPIO_digitalWrite(BZR_PIN, low);
     d14:	004007b7          	lui	a5,0x400
      Delay_Ms(6);
     d18:	6525                	lui	a0,0x9
      GPIO_digitalWrite(BZR_PIN, low);
     d1a:	c81c                	sw	a5,16(s0)
      Delay_Ms(6);
     d1c:	ca050513          	add	a0,a0,-864 # 8ca0 <main.c.9f50ad4d+0x638a>
    for (int i = 0; i < 50; i++) {
     d20:	14fd                	add	s1,s1,-1
      Delay_Ms(6);
     d22:	cb2ff0ef          	jal	1d4 <DelaySysTick>
    for (int i = 0; i < 50; i++) {
     d26:	fcf9                	bnez	s1,d04 <game_loop+0x24c>
    Delay_Ms(100);
     d28:	00092537          	lui	a0,0x92
     d2c:	7c050513          	add	a0,a0,1984 # 927c0 <main.c.9f50ad4d+0x8feaa>
      GPIO_digitalWrite(BZR_PIN, high);
     d30:	40011437          	lui	s0,0x40011
    Delay_Ms(100);
     d34:	ca0ff0ef          	jal	1d4 <DelaySysTick>
     d38:	03200493          	li	s1,50
      GPIO_digitalWrite(BZR_PIN, high);
     d3c:	40040413          	add	s0,s0,1024 # 40011400 <__global_pointer$+0x20010af8>
     d40:	04000793          	li	a5,64
      Delay_Ms(1);
     d44:	6505                	lui	a0,0x1
      GPIO_digitalWrite(BZR_PIN, high);
     d46:	c81c                	sw	a5,16(s0)
      Delay_Ms(1);
     d48:	77050513          	add	a0,a0,1904 # 1770 <clear+0x114>
     d4c:	c88ff0ef          	jal	1d4 <DelaySysTick>
      GPIO_digitalWrite(BZR_PIN, low);
     d50:	004007b7          	lui	a5,0x400
      Delay_Ms(6);
     d54:	6525                	lui	a0,0x9
      GPIO_digitalWrite(BZR_PIN, low);
     d56:	c81c                	sw	a5,16(s0)
      Delay_Ms(6);
     d58:	ca050513          	add	a0,a0,-864 # 8ca0 <main.c.9f50ad4d+0x638a>
    for (int i = 0; i < 50; i++) {
     d5c:	14fd                	add	s1,s1,-1
      Delay_Ms(6);
     d5e:	c76ff0ef          	jal	1d4 <DelaySysTick>
    for (int i = 0; i < 50; i++) {
     d62:	fcf9                	bnez	s1,d40 <game_loop+0x288>
	  Delay_Ms(2000);
     d64:	00b72537          	lui	a0,0xb72
     d68:	b0050513          	add	a0,a0,-1280 # b71b00 <main.c.9f50ad4d+0xb6f1ea>
     d6c:	c68ff0ef          	jal	1d4 <DelaySysTick>
          return false;
     d70:	4501                	li	a0,0
    }
    
    draw_road();
    ssd1306_refresh();
  }
}
     d72:	4086                	lw	ra,64(sp)
     d74:	5472                	lw	s0,60(sp)
     d76:	54e2                	lw	s1,56(sp)
     d78:	04410113          	add	sp,sp,68
     d7c:	8082                	ret
    for (int i = 0; i < car_n; i++){
     d7e:	0385                	add	t2,t2,1
     d80:	02d1                	add	t0,t0,20
     d82:	bd39                	j	ba0 <game_loop+0xe8>
    int dot_line[] = {85,60,35};
     d84:	05500793          	li	a5,85
     d88:	d63e                	sw	a5,44(sp)
     d8a:	03c00793          	li	a5,60
     d8e:	d83e                	sw	a5,48(sp)
      ssd1306_drawLine(road_line[i], 0, road_line[i], SSD1306_H, 1);
     d90:	04000693          	li	a3,64
    int dot_line[] = {85,60,35};
     d94:	02300793          	li	a5,35
      ssd1306_drawLine(road_line[i], 0, road_line[i], SSD1306_H, 1);
     d98:	06900613          	li	a2,105
     d9c:	4581                	li	a1,0
     d9e:	06900513          	li	a0,105
    int dot_line[] = {85,60,35};
     da2:	da3e                	sw	a5,52(sp)
      ssd1306_drawLine(road_line[i], 0, road_line[i], SSD1306_H, 1);
     da4:	e9cff0ef          	jal	440 <ssd1306_drawLine.constprop.0>
     da8:	04000693          	li	a3,64
     dac:	4629                	li	a2,10
     dae:	4581                	li	a1,0
     db0:	4529                	li	a0,10
     db2:	e8eff0ef          	jal	440 <ssd1306_drawLine.constprop.0>
    for (int i = 0; i < 3; i++) {
     db6:	1078                	add	a4,sp,44
      for (int j = 0; j < SSD1306_H; j+=10) {
     db8:	4781                	li	a5,0
        ssd1306_drawLine(dot_line[i], j, dot_line[i], j+7, 1);
     dba:	01079593          	sll	a1,a5,0x10
     dbe:	00075603          	lhu	a2,0(a4)
     dc2:	81c1                	srl	a1,a1,0x10
     dc4:	00758693          	add	a3,a1,7
     dc8:	06c2                	sll	a3,a3,0x10
     dca:	82c1                	srl	a3,a3,0x10
     dcc:	8532                	mv	a0,a2
     dce:	d03a                	sw	a4,32(sp)
     dd0:	ce3e                	sw	a5,28(sp)
     dd2:	e6eff0ef          	jal	440 <ssd1306_drawLine.constprop.0>
      for (int j = 0; j < SSD1306_H; j+=10) {
     dd6:	47f2                	lw	a5,28(sp)
     dd8:	04600693          	li	a3,70
     ddc:	5702                	lw	a4,32(sp)
     dde:	07a9                	add	a5,a5,10 # 40000a <main.c.9f50ad4d+0x3fd6f4>
     de0:	fcd79de3          	bne	a5,a3,dba <game_loop+0x302>
    for (int i = 0; i < 3; i++) {
     de4:	0711                	add	a4,a4,4
     de6:	183c                	add	a5,sp,56
     de8:	fcf718e3          	bne	a4,a5,db8 <game_loop+0x300>
    uint8_t button_is_pressed = !GPIO_digitalRead(BTN_PIN);
     dec:	47c2                	lw	a5,16(sp)
     dee:	0017b713          	seqz	a4,a5
     df2:	c83a                	sw	a4,16(sp)
    ssd1306_refresh();
     df4:	3195                	jal	a58 <ssd1306_refresh>
    rot_b_pre_state = rot_b_state;
     df6:	47b2                	lw	a5,12(sp)
    rot_a_pre_state = rot_a_state;
     df8:	46d2                	lw	a3,20(sp)
  while (1) {
     dfa:	4742                	lw	a4,16(sp)
     dfc:	b9cd                	j	aee <game_loop+0x36>

00000dfe <SystemInit>:
     dfe:	400227b7          	lui	a5,0x40022
     e02:	4705                	li	a4,1
     e04:	c398                	sw	a4,0(a5)
     e06:	400217b7          	lui	a5,0x40021
     e0a:	01080737          	lui	a4,0x1080
     e0e:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x200206fc>
     e12:	08170713          	add	a4,a4,129 # 1080081 <main.c.9f50ad4d+0x107d76b>
     e16:	c398                	sw	a4,0(a5)
     e18:	009f0737          	lui	a4,0x9f0
     e1c:	c798                	sw	a4,8(a5)
     e1e:	40021737          	lui	a4,0x40021
     e22:	431c                	lw	a5,0(a4)
     e24:	00679693          	sll	a3,a5,0x6
     e28:	fe06dde3          	bgez	a3,e22 <SystemInit+0x24>
     e2c:	435c                	lw	a5,4(a4)
     e2e:	400216b7          	lui	a3,0x40021
     e32:	9bf1                	and	a5,a5,-4
     e34:	0027e793          	or	a5,a5,2
     e38:	c35c                	sw	a5,4(a4)
     e3a:	4721                	li	a4,8
     e3c:	42dc                	lw	a5,4(a3)
     e3e:	8bb1                	and	a5,a5,12
     e40:	fee79ee3          	bne	a5,a4,e3c <SystemInit+0x3e>
     e44:	e00007b7          	lui	a5,0xe0000
     e48:	0f878793          	add	a5,a5,248 # e00000f8 <__global_pointer$+0xbffff7f0>
     e4c:	0007a023          	sw	zero,0(a5)
     e50:	e00007b7          	lui	a5,0xe0000
     e54:	0f478793          	add	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff7ec>
     e58:	08000713          	li	a4,128
     e5c:	c398                	sw	a4,0(a5)
     e5e:	8082                	ret

00000e60 <main>:

int main()
{
     e60:	1141                	add	sp,sp,-16
     e62:	c606                	sw	ra,12(sp)
     e64:	c422                	sw	s0,8(sp)
     e66:	c226                	sw	s1,4(sp)
	// 48MHz internal clock
	SystemInit();
     e68:	3f59                	jal	dfe <SystemInit>
    GPIO_port_enable(GPIO_port_A);
     e6a:	400214b7          	lui	s1,0x40021
     e6e:	4c9c                	lw	a5,24(s1)
    GPIO_pinMode(BZR_PIN, GPIO_pinMode_O_pushPull, GPIO_Speed_10MHz);
     e70:	f10006b7          	lui	a3,0xf1000
     e74:	16fd                	add	a3,a3,-1 # f0ffffff <__global_pointer$+0xd0fff6f7>
    GPIO_port_enable(GPIO_port_A);
     e76:	0047e793          	or	a5,a5,4
     e7a:	cc9c                	sw	a5,24(s1)
    GPIO_port_enable(GPIO_port_D);
     e7c:	4c9c                	lw	a5,24(s1)
    GPIO_pinMode(BZR_PIN, GPIO_pinMode_O_pushPull, GPIO_Speed_10MHz);
     e7e:	40011437          	lui	s0,0x40011
    GPIO_pinMode(ROT_B_PIN, GPIO_pinMode_I_pullUp, GPIO_Speed_10MHz);
     e82:	6605                	lui	a2,0x1
    GPIO_port_enable(GPIO_port_D);
     e84:	0207e793          	or	a5,a5,32
     e88:	cc9c                	sw	a5,24(s1)
    GPIO_port_enable(GPIO_port_C);
     e8a:	4c9c                	lw	a5,24(s1)
    GPIO_pinMode(ROT_B_PIN, GPIO_pinMode_I_pullUp, GPIO_Speed_10MHz);
     e8c:	80060613          	add	a2,a2,-2048 # 800 <mini_vpprintf+0x112>

  init_gpio();

	Delay_Ms( 200 );
     e90:	00125537          	lui	a0,0x125
    GPIO_port_enable(GPIO_port_C);
     e94:	0107e793          	or	a5,a5,16
     e98:	cc9c                	sw	a5,24(s1)
    GPIO_pinMode(BZR_PIN, GPIO_pinMode_O_pushPull, GPIO_Speed_10MHz);
     e9a:	400117b7          	lui	a5,0x40011
     e9e:	40078793          	add	a5,a5,1024 # 40011400 <__global_pointer$+0x20010af8>
     ea2:	4398                	lw	a4,0(a5)
	Delay_Ms( 200 );
     ea4:	f8050513          	add	a0,a0,-128 # 124f80 <main.c.9f50ad4d+0x12266a>
    GPIO_pinMode(BZR_PIN, GPIO_pinMode_O_pushPull, GPIO_Speed_10MHz);
     ea8:	8f75                	and	a4,a4,a3
     eaa:	c398                	sw	a4,0(a5)
     eac:	4398                	lw	a4,0(a5)
     eae:	010006b7          	lui	a3,0x1000
     eb2:	8f55                	or	a4,a4,a3
     eb4:	c398                	sw	a4,0(a5)
    GPIO_pinMode(BTN_PIN, GPIO_pinMode_I_pullUp, GPIO_Speed_10MHz);
     eb6:	4018                	lw	a4,0(s0)
     eb8:	fff106b7          	lui	a3,0xfff10
     ebc:	16fd                	add	a3,a3,-1 # fff0ffff <__global_pointer$+0xdff0f6f7>
     ebe:	8f75                	and	a4,a4,a3
     ec0:	c018                	sw	a4,0(s0)
     ec2:	4018                	lw	a4,0(s0)
     ec4:	000806b7          	lui	a3,0x80
     ec8:	8f55                	or	a4,a4,a3
     eca:	c018                	sw	a4,0(s0)
     ecc:	4741                	li	a4,16
     ece:	c818                	sw	a4,16(s0)
    GPIO_pinMode(ROT_A_PIN, GPIO_pinMode_I_pullUp, GPIO_Speed_10MHz);
     ed0:	4398                	lw	a4,0(a5)
     ed2:	ff1006b7          	lui	a3,0xff100
     ed6:	16fd                	add	a3,a3,-1 # ff0fffff <__global_pointer$+0xdf0ff6f7>
     ed8:	8f75                	and	a4,a4,a3
     eda:	c398                	sw	a4,0(a5)
     edc:	4398                	lw	a4,0(a5)
     ede:	008006b7          	lui	a3,0x800
     ee2:	8f55                	or	a4,a4,a3
     ee4:	c398                	sw	a4,0(a5)
     ee6:	02000713          	li	a4,32
     eea:	cb98                	sw	a4,16(a5)
    GPIO_pinMode(ROT_B_PIN, GPIO_pinMode_I_pullUp, GPIO_Speed_10MHz);
     eec:	400117b7          	lui	a5,0x40011
     ef0:	80078793          	add	a5,a5,-2048 # 40010800 <__global_pointer$+0x2000fef8>
     ef4:	4394                	lw	a3,0(a5)
     ef6:	777d                	lui	a4,0xfffff
     ef8:	0ff70713          	add	a4,a4,255 # fffff0ff <__global_pointer$+0xdfffe7f7>
     efc:	c03a                	sw	a4,0(sp)
     efe:	8ef9                	and	a3,a3,a4
     f00:	c394                	sw	a3,0(a5)
     f02:	4394                	lw	a3,0(a5)
     f04:	8ed1                	or	a3,a3,a2
     f06:	c394                	sw	a3,0(a5)
     f08:	4691                	li	a3,4
     f0a:	cb94                	sw	a3,16(a5)
	Delay_Ms( 200 );
     f0c:	ac8ff0ef          	jal	1d4 <DelaySysTick>
 * init I2C and GPIO
 */
uint8_t ssd1306_i2c_init(void)
{
	// Enable GPIOC and I2C
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC;
     f10:	4c9c                	lw	a5,24(s1)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     f12:	002006b7          	lui	a3,0x200
	// PC1 is SDA, 10MHz Output, alt func, open-drain
	GPIOC->CFGLR &= ~(0xf<<(4*1));
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF)<<(4*1);
	
	// PC2 is SCL, 10MHz Output, alt func, open-drain
	GPIOC->CFGLR &= ~(0xf<<(4*2));
     f16:	4702                	lw	a4,0(sp)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC;
     f18:	0107e793          	or	a5,a5,16
     f1c:	cc9c                	sw	a5,24(s1)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     f1e:	4cdc                	lw	a5,28(s1)
     f20:	8fd5                	or	a5,a5,a3
     f22:	ccdc                	sw	a5,28(s1)
	GPIOC->CFGLR &= ~(0xf<<(4*1));
     f24:	401c                	lw	a5,0(s0)
     f26:	f0f7f793          	and	a5,a5,-241
     f2a:	c01c                	sw	a5,0(s0)
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF)<<(4*1);
     f2c:	401c                	lw	a5,0(s0)
     f2e:	0d07e793          	or	a5,a5,208
     f32:	c01c                	sw	a5,0(s0)
	GPIOC->CFGLR &= ~(0xf<<(4*2));
     f34:	401c                	lw	a5,0(s0)
     f36:	8ff9                	and	a5,a5,a4
     f38:	c01c                	sw	a5,0(s0)
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF)<<(4*2);
     f3a:	401c                	lw	a5,0(s0)
     f3c:	6705                	lui	a4,0x1
     f3e:	d0070713          	add	a4,a4,-768 # d00 <game_loop+0x248>
     f42:	8fd9                	or	a5,a5,a4
     f44:	c01c                	sw	a5,0(s0)
{
	// pulse reset
	ssd1306_rst();
	
	// initialize OLED
	uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
     f46:	6405                	lui	s0,0x1
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*4);
	GPIOC->BSHR = (1<<(16+4));
#endif

	// load I2C regs
	ssd1306_i2c_setup();
     f48:	b62ff0ef          	jal	2aa <ssd1306_i2c_setup>
     f4c:	13040413          	add	s0,s0,304 # 1130 <ssd1306_init_array>
	while(*cmd_list != SSD1306_TERMINATE_CMDS)
     f50:	00044503          	lbu	a0,0(s0)
     f54:	0ff00793          	li	a5,255
     f58:	00f51563          	bne	a0,a5,f62 <main+0x102>
		if(ssd1306_cmd(*cmd_list++))
			return 1;
	}
	
	// clear display
	ssd1306_setbuf(0);
     f5c:	3cc1                	jal	a2c <ssd1306_setbuf.constprop.0>
	ssd1306_refresh();
     f5e:	3ced                	jal	a58 <ssd1306_refresh>
    for (int i = 0; i < 30; i+=2) {
     f60:	a021                	j	f68 <main+0x108>
		if(ssd1306_cmd(*cmd_list++))
     f62:	0405                	add	s0,s0,1
     f64:	3c71                	jal	a00 <ssd1306_cmd>
     f66:	d56d                	beqz	a0,f50 <main+0xf0>
	uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
     f68:	4401                	li	s0,0
      ssd1306_setbuf(0);
     f6a:	34c9                	jal	a2c <ssd1306_setbuf.constprop.0>
      ssd1306_drawImage(i, 0, title, 24, 64, 0);
     f6c:	6605                	lui	a2,0x1
     f6e:	4781                	li	a5,0
     f70:	8522                	mv	a0,s0
     f72:	04000713          	li	a4,64
     f76:	46e1                	li	a3,24
     f78:	19460613          	add	a2,a2,404 # 1194 <title>
     f7c:	4581                	li	a1,0
     f7e:	b80ff0ef          	jal	2fe <ssd1306_drawImage>
      ssd1306_refresh();
     f82:	3cd9                	jal	a58 <ssd1306_refresh>
      Delay_Ms(100);
     f84:	00092537          	lui	a0,0x92
     f88:	7c050513          	add	a0,a0,1984 # 927c0 <main.c.9f50ad4d+0x8feaa>
     f8c:	a48ff0ef          	jal	1d4 <DelaySysTick>
    for (int i = 0; i < 30; i+=2) {
     f90:	0409                	add	s0,s0,2
     f92:	47f9                	li	a5,30
     f94:	fcf41be3          	bne	s0,a5,f6a <main+0x10a>
    int c = 0;
     f98:	4401                	li	s0,0
    bool button_state = false;
     f9a:	4481                	li	s1,0
      ssd1306_setbuf(0);
     f9c:	3c41                	jal	a2c <ssd1306_setbuf.constprop.0>
      ssd1306_drawImage(30, 0, title, 24, 64, 0);
     f9e:	6605                	lui	a2,0x1
     fa0:	4781                	li	a5,0
     fa2:	04000713          	li	a4,64
     fa6:	46e1                	li	a3,24
     fa8:	19460613          	add	a2,a2,404 # 1194 <title>
     fac:	4581                	li	a1,0
     fae:	4579                	li	a0,30
     fb0:	b4eff0ef          	jal	2fe <ssd1306_drawImage>
      if (c > 50) {
     fb4:	03200793          	li	a5,50
     fb8:	0487d263          	bge	a5,s0,ffc <main+0x19c>
        ssd1306_drawImage(80, 20, start, 24, 24, 0);
     fbc:	4781                	li	a5,0
        ssd1306_drawImage(80, 20, start, 24, 24, 1);
     fbe:	6605                	lui	a2,0x1
     fc0:	4761                	li	a4,24
     fc2:	46e1                	li	a3,24
     fc4:	14c60613          	add	a2,a2,332 # 114c <start>
     fc8:	45d1                	li	a1,20
     fca:	05000513          	li	a0,80
     fce:	b30ff0ef          	jal	2fe <ssd1306_drawImage>
      ssd1306_refresh();
     fd2:	3459                	jal	a58 <ssd1306_refresh>
      uint8_t button_is_pressed = !GPIO_digitalRead(BTN_PIN);
     fd4:	400117b7          	lui	a5,0x40011
     fd8:	4798                	lw	a4,8(a5)
     fda:	40078793          	add	a5,a5,1024 # 40011400 <__global_pointer$+0x20010af8>
     fde:	8b41                	and	a4,a4,16
     fe0:	00173693          	seqz	a3,a4
      if (button_is_pressed)
     fe4:	ef11                	bnez	a4,1000 <main+0x1a0>
          GPIO_digitalWrite(BZR_PIN, high);
     fe6:	04000713          	li	a4,64
     fea:	cb98                	sw	a4,16(a5)
      c ++;      
     fec:	0405                	add	s0,s0,1
      if (c > 100) {
     fee:	06500793          	li	a5,101
     ff2:	00f41363          	bne	s0,a5,ff8 <main+0x198>
        c = 0;
     ff6:	4401                	li	s0,0
     ff8:	84b6                	mv	s1,a3
     ffa:	b74d                	j	f9c <main+0x13c>
        ssd1306_drawImage(80, 20, start, 24, 24, 1);
     ffc:	4785                	li	a5,1
     ffe:	b7c1                	j	fbe <main+0x15e>
          GPIO_digitalWrite(BZR_PIN, low);
    1000:	00400737          	lui	a4,0x400
    1004:	cb98                	sw	a4,16(a5)
      if (button_state && !button_is_pressed){
    1006:	d0fd                	beqz	s1,fec <main+0x18c>
		ssd1306_init();

    opening();

    int stage = 1;
    bool result = false;
    1008:	4401                	li	s0,0
    int stage = 1;
    100a:	4485                	li	s1,1
    ssd1306_setbuf(0);
    100c:	3405                	jal	a2c <ssd1306_setbuf.constprop.0>
    switch (stage) {
    100e:	4789                	li	a5,2
    1010:	04f48d63          	beq	s1,a5,106a <main+0x20a>
    1014:	478d                	li	a5,3
    1016:	06f48263          	beq	s1,a5,107a <main+0x21a>
    101a:	4785                	li	a5,1
    101c:	00f49e63          	bne	s1,a5,1038 <main+0x1d8>
          ssd1306_drawImage(40, 0, level_1, 24, 64, 0);
    1020:	6605                	lui	a2,0x1
    1022:	4781                	li	a5,0
    1024:	04000713          	li	a4,64
    1028:	46e1                	li	a3,24
    102a:	3d460613          	add	a2,a2,980 # 13d4 <level_1>
          ssd1306_drawImage(40, 0, level_3, 24, 64, 0);
    102e:	4581                	li	a1,0
    1030:	02800513          	li	a0,40
    1034:	acaff0ef          	jal	2fe <ssd1306_drawImage>
    ssd1306_refresh();
    1038:	3405                	jal	a58 <ssd1306_refresh>
	  Delay_Ms(1500);
    103a:	00895537          	lui	a0,0x895
    103e:	44050513          	add	a0,a0,1088 # 895440 <main.c.9f50ad4d+0x892b2a>
    1042:	992ff0ef          	jal	1d4 <DelaySysTick>
    while (1) {
 
      show_level(stage);
      switch (stage) {
    1046:	4789                	li	a5,2
    1048:	04f48163          	beq	s1,a5,108a <main+0x22a>
    104c:	478d                	li	a5,3
    104e:	04f48363          	beq	s1,a5,1094 <main+0x234>
    1052:	4785                	li	a5,1
    1054:	00f49863          	bne	s1,a5,1064 <main+0x204>
        case 1:
          result = game_loop(car_s_1);
    1058:	20000537          	lui	a0,0x20000
    105c:	0b450513          	add	a0,a0,180 # 200000b4 <car_s_1>
          break;
        case 2:
          result = game_loop(car_s_2);
    1060:	3ca1                	jal	ab8 <game_loop>
    1062:	842a                	mv	s0,a0
        case 3:
          result = game_loop(car_s_3);
          break;
      }

      if (result) {
    1064:	d445                	beqz	s0,100c <main+0x1ac>
        stage ++;
    1066:	0485                	add	s1,s1,1 # 40021001 <__global_pointer$+0x200206f9>
    1068:	b755                	j	100c <main+0x1ac>
          ssd1306_drawImage(40, 0, level_2, 24, 64, 0);
    106a:	6605                	lui	a2,0x1
    106c:	4781                	li	a5,0
    106e:	04000713          	li	a4,64
    1072:	46e1                	li	a3,24
    1074:	31460613          	add	a2,a2,788 # 1314 <level_2>
    1078:	bf5d                	j	102e <main+0x1ce>
          ssd1306_drawImage(40, 0, level_3, 24, 64, 0);
    107a:	6605                	lui	a2,0x1
    107c:	4781                	li	a5,0
    107e:	04000713          	li	a4,64
    1082:	46e1                	li	a3,24
    1084:	25460613          	add	a2,a2,596 # 1254 <level_3>
    1088:	b75d                	j	102e <main+0x1ce>
          result = game_loop(car_s_2);
    108a:	20000537          	lui	a0,0x20000
    108e:	06450513          	add	a0,a0,100 # 20000064 <car_s_2>
    1092:	b7f9                	j	1060 <main+0x200>
          result = game_loop(car_s_3);
    1094:	20000537          	lui	a0,0x20000
    1098:	00050513          	mv	a0,a0
    109c:	3c31                	jal	ab8 <game_loop>
    109e:	842a                	mv	s0,a0
      if (result) {
    10a0:	f52d                	bnez	a0,100a <main+0x1aa>
    10a2:	b7ad                	j	100c <main+0x1ac>
    10a4:	31647373          	csrrc	t1,0x316,8
    10a8:	5f363033          	.insn	4, 0x5f363033
    10ac:	3269                	jal	a36 <ssd1306_setbuf.constprop.0+0xa>
    10ae:	72655f63          	bge	a0,t1,17ec <newt_right+0x8>
    10b2:	6f72                	.insn	2, 0x6f72
    10b4:	2072                	.insn	2, 0x2072
    10b6:	202d                	jal	10e0 <main+0x280>
    10b8:	6974                	.insn	2, 0x6974
    10ba:	656d                	lui	a0,0x1b
    10bc:	2074756f          	jal	a0,48ac2 <main.c.9f50ad4d+0x461ac>
    10c0:	74696177          	.insn	4, 0x74696177
    10c4:	6e69                	lui	t3,0x1a
    10c6:	6f662067          	.insn	4, 0x6f662067
    10ca:	2072                	.insn	2, 0x2072
    10cc:	7325                	lui	t1,0xfffe9
    10ce:	0d0a                	sll	s10,s10,0x2
    10d0:	0000                	unimp
    10d2:	0000                	unimp
    10d4:	6f6e                	.insn	2, 0x6f6e
    10d6:	2074                	.insn	2, 0x2074
    10d8:	7562                	.insn	2, 0x7562
    10da:	00007973          	csrrc	s2,ustatus,0
    10de:	0000                	unimp
    10e0:	616d                	add	sp,sp,240
    10e2:	72657473          	csrrc	s0,mhpmevent6h,10
    10e6:	6d20                	.insn	2, 0x6d20
    10e8:	0065646f          	jal	s0,570ee <main.c.9f50ad4d+0x547d8>
    10ec:	7274                	.insn	2, 0x7274
    10ee:	6e61                	lui	t3,0x18
    10f0:	74696d73          	csrrs	s10,0x746,18
    10f4:	6d20                	.insn	2, 0x6d20
    10f6:	0065646f          	jal	s0,570fc <main.c.9f50ad4d+0x547e6>
    10fa:	0000                	unimp
    10fc:	7874                	.insn	2, 0x7874
    10fe:	6520                	.insn	2, 0x6520
    1100:	706d                	c.lui	zero,0xffffb
    1102:	7974                	.insn	2, 0x7974
    1104:	0000                	unimp
    1106:	0000                	unimp
    1108:	7274                	.insn	2, 0x7274
    110a:	6e61                	lui	t3,0x18
    110c:	74696d73          	csrrs	s10,0x746,18
    1110:	6320                	.insn	2, 0x6320
    1112:	6c706d6f          	jal	s10,7fd8 <main.c.9f50ad4d+0x56c2>
    1116:	7465                	lui	s0,0xffff9
    1118:	0065                	c.nop	25
	...

0000111c <errstr>:
    111c:	10d4 0000 10e0 0000 10ec 0000 10fc 0000     ................
    112c:	1108 0000                                   ....

00001130 <ssd1306_init_array>:
    1130:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
    1140:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......

0000114c <start>:
    114c:	0000 0000 0004 7c00 0000 0004 0000 0000     .......|........
    115c:	0068 1400 0000 0014 7800 0000 0000 7800     h........x.....x
    116c:	0000 0014 1400 0000 0078 0000 0000 0004     ........x.......
    117c:	7c00 0000 0004 0000 0000 0024 5400 0000     .|........$..T..
    118c:	0054 4800 0000 0000                         T..H....

00001194 <title>:
	...
    119c:	0000 00f8 0401 0200 00fa 0603 0200 0002     ................
    11ac:	0202 0300 00fe 0202 0300 00fe 0000 0000     ................
    11bc:	0000 fe03 0200 0002 fe03 0000 0000 0000     ................
    11cc:	0000 00f8 0401 0200 00fa 0603 0200 0002     ................
    11dc:	0202 0200 0002 0401 0000 00f8 0000 0000     ................
    11ec:	0006 1800 0000 0020 c000 0300 00b0 dc00     ...... .........
    11fc:	0000 0026 1a00 0000 0006 0000 0000 00f8     ..&.............
    120c:	0401 0200 00fa 0603 0200 0002 0202 0200     ................
    121c:	0002 0401 0000 00f8 0000 0300 00fe 0202     ................
    122c:	0300 00fe 0400 0000 0018 6000 0100 00a0     ...........`....
    123c:	5000 0000 002c 1600 0300 00fe 0000 0000     .P..,...........
	...

00001254 <level_3>:
	...
    126c:	0000 0700 80e7 ff07 0fc0 e01f 0c0e 0c30     ..............0.
    127c:	1000 600c 0c10 c0b1 b30c 04d0 90d3 4d04     ...`...........M
    128c:	0210 a040 8001 0080 0000 000f 1f00 0000     ..@.............
    129c:	801f 1800 0080 8008 0c00 0080 0007 0000     ................
    12ac:	0006 3f00 0000 00ff fd07 0f00 00e1 010f     ...?............
    12bc:	0c00 001e 3e0c 0400 0007 8103 0000 0071     .....>........q.
    12cc:	0d00 0000 0001 000f 0f00 0000 800f 0c00     ................
    12dc:	0080 800c 0c00 e0ff ff0c 0cf0 f07f 000c     ................
    12ec:	0c10 1000 ff07 00f0 0000 0000 0000 0000     ................
	...

00001314 <level_2>:
	...
    132c:	0000 0f00 800f 1f0f 0fc0 e0bf f80c 0c30     ..............0.
    133c:	10f0 e10c 0c10 80e3 c70c 0c80 100b 130c     ................
    134c:	0c10 2063 8107 0080 0000 000f 1f00 0000     ..c ............
    135c:	801f 1800 0080 8008 0c00 0080 0007 0000     ................
    136c:	0006 3f00 0000 00ff fd07 0f00 00e1 010f     ...?............
    137c:	0c00 001e 3e0c 0400 0007 8103 0000 0071     .....>........q.
    138c:	0d00 0000 0001 000f 0f00 0000 800f 0c00     ................
    139c:	0080 800c 0c00 e0ff ff0c 0cf0 f07f 000c     ................
    13ac:	0c10 1000 ff07 00f0 0000 0000 0000 0000     ................
	...

000013d4 <level_1>:
	...
    13f4:	0f00 e0ff ff0f 0fe0 f0ff 000c 0c10 1000     ................
    1404:	0004 0310 20fe 0200 0060 c001 0000 0000     ..... ..`.......
    1414:	0000 000f 1f00 0000 801f 1800 0080 8008     ................
    1424:	0c00 0080 0007 0000 0006 3f00 0000 00ff     ...........?....
    1434:	fd07 0f00 00e1 010f 0c00 001e 3e0c 0400     .............>..
    1444:	0007 8103 0000 0071 0d00 0000 0001 000f     ......q.........
    1454:	0f00 0000 800f 0c00 0080 800c 0c00 e0ff     ................
    1464:	ff0c 0cf0 f07f 000c 0c10 1000 ff07 00f0     ................
	...

00001494 <go_car_img>:
	...
    14a4:	3f00 0000 2400 00c0 2400 00b0 3000 0010     .?...$...$...0..
    14b4:	1000 0020 0000 0060 0900 0000 0900 0000     .. ...`.........
    14c4:	0900 0000 0000 0000 0000 0000 0000 0000     ................
    14d4:	0e00 0000 1f00 0080 3f00 00c0 3f00 00c0     .........?...?..
    14e4:	3f00 00c0 3f00 00c0 ff00 00c0 df01 00fc     .?...?..........
    14f4:	8f01 80ff 8f01 c0ff df01 e0ff ff00 e0ff     ................
    1504:	3f00 f0ff 3f00 f0ff 3f00 f0ff 3e00 f0ff     .?...?...?...>..
    1514:	3e00 f0ff 3f00 70e0 3f00 70c0 3f00 60c0     .>...?.p.?.p.?.`
    1524:	3f00 e0c0 ff00 c0c1 df01 80c3 8f01 00ff     .?..............
    1534:	8f01 00c0 df01 00c0 ff00 00c0 3f00 0080     .............?..
    1544:	3f00 0080 3f00 0000 3f00 0000 3e00 0000     .?...?...?...>..
	...

0000155c <game_over_img>:
	...
    158c:	601e c0c0 601e c0c0 9801 c0cc 9801 c0cc     .`...`..........
    159c:	9801 c0cc 9801 c0cc e01f 003f e01f 003f     ..........?...?.
	...
    15b4:	1818 00ff 1818 00ff 9819 c000 9819 c000     ................
    15c4:	9819 001f 9819 001f e007 c000 e007 c000     ................
    15d4:	0000 00ff 0000 00ff f801 0000 f801 0000     ................
    15e4:	0006 00ff 0006 00ff 0018 c00c 0018 c00c     ................
    15f4:	0006 c00c 0006 c00c f801 00ff f801 00ff     ................
	...
    160c:	e007 c03c e007 c03c 1818 c0cc 1818 c0cc     ..<...<.........
    161c:	1818 c0c0 1818 c0c0 e007 003f e007 003f     ..........?...?.
	...

0000165c <clear>:
    165c:	0000 1f00 00fe 0000 0600 0000 0000 000e     ................
    166c:	0000 fbff 0000 0300 00f3 0000 7100 0000     .............q..
    167c:	0000 0031 0100 f0fc 0000 ff03 0090 0000     ..1.............
    168c:	981f c03c 0200 3c18 00c0 1803 3003 fd07     ..<....<.....0..
    169c:	0398 0030 983d 3003 3d38 0398 1f30 98fd     ..0.=..08=..0...
    16ac:	c03f cd01 3f80 01c0 8099 0000 1106 0080     ?....?..........
    16bc:	0000 0061 c03f 0000 3f00 88c0 0000 3003     ..a.?....?.....0
    16cc:	00a8 0300 a830 0000 3003 0070 0300 0030     ....0....0p...0.
    16dc:	0000 c03f 0068 3f00 a8c0 0000 0000 0088     ..?.h..?........
    16ec:	0000 7000 0000 3030 0000 3300 f030 0000     ...p..00...30...
    16fc:	3033 0028 3300 2830 0000 3033 00f0 0f00     30(..30(..30....
    170c:	00c0 0000 c00f 0008 0000 f800 0000 0000     ................
    171c:	0008 3000 0000 0000 0030 0048 3000 a800     ...0....0.H..0..
    172c:	0000 0030 00a8 3f00 90f0 0000 f03f 0000     ..0....?....?...
	...
    1744:	6000 0c00 03c0 0070 c00c 3803 3000 d933     .`....p....8.03.
    1754:	0098 3030 8978 3080 1830 808c 3030 c40c     ..00x..00...00..
    1764:	0fc0 ffc0 c0c4 c00f c6f8 0040 0100 60f6     ..........@....`
    1774:	0000 ce07 0060 0f00 f08d 0000 1c7e 0070     ....`.......~.p.
    1784:	3000 d038 0000 f100 00a0 0300 20f3 0000     .08.......... ..
    1794:	860f 00c0 3c00 8000                         .....<..

0000179c <car>:
	...
    17a4:	0000 007c 7c00 0000 007c ff03 03c0 c0ff     ..|..|..|.......
    17b4:	ff03 00c0 c07f 7f00 00c0 c07f 7c00 0040     .............|@.
    17c4:	407c 7c00 0340 40fc ff03 03c0 00fc 7c00     |@.|@..@.......|
    17d4:	0000 0074 7c00 0000 0000 0000 0000 0000     ..t..|..........

000017e4 <newt_right>:
    17e4:	0000 0000 0000 f00f 0f00 00f0 3c3c 3c00     ............<<.<
    17f4:	003c 00f0 f0c0 c000 03f3 f30f 0f03 c3fc     <...............
    1804:	fc3f 3fc3 ff3f 3fff ffff ff00 00f0 f0ff     ?..??..?........
    1814:	c003 033c 3cc0 0000 0000 0000 0000 0000     ..<..<..........
	...

0000182c <newt_left>:
	...
    183c:	0000 c003 033c 3cc0 ff00 00f0 f0ff ff3f     ....<..<......?.
    184c:	3fff ffff c3fc fc3f 3fc3 03f3 f30f 0f03     .?....?..?......
    185c:	00f0 f0c0 c000 3c3c 3c00 003c f00f 0f00     ......<<.<<.....
    186c:	00f0 0000 0000 0000                         ........
