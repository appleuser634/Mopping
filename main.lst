
main.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	52a0006f          	j	52a <handle_reset>
   4:	00000000          	.word	0x00000000
   8:	000005a8          	.word	0x000005a8
   c:	000005a6          	.word	0x000005a6
	...
  30:	000005a6          	.word	0x000005a6
  34:	00000000          	.word	0x00000000
  38:	000005a6          	.word	0x000005a6
  3c:	00000000          	.word	0x00000000
  40:	000005a6          	.word	0x000005a6
  44:	000005a6          	.word	0x000005a6
  48:	000005a6          	.word	0x000005a6
  4c:	000005a6          	.word	0x000005a6
  50:	000005a6          	.word	0x000005a6
  54:	000005a6          	.word	0x000005a6
  58:	000005a6          	.word	0x000005a6
  5c:	000005a6          	.word	0x000005a6
  60:	000005a6          	.word	0x000005a6
  64:	000005a6          	.word	0x000005a6
  68:	000005a6          	.word	0x000005a6
  6c:	000005a6          	.word	0x000005a6
  70:	000005a6          	.word	0x000005a6
  74:	000005a6          	.word	0x000005a6
  78:	000005a6          	.word	0x000005a6
  7c:	000005a6          	.word	0x000005a6
  80:	000005a6          	.word	0x000005a6
  84:	000005a6          	.word	0x000005a6
  88:	000005a6          	.word	0x000005a6
  8c:	000005a6          	.word	0x000005a6
  90:	000005a6          	.word	0x000005a6
  94:	000005a6          	.word	0x000005a6
  98:	000005a6          	.word	0x000005a6
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <__mulsi3>:
      a0:	862a                	mv	a2,a0
      a2:	4501                	li	a0,0
      a4:	0015f693          	and	a3,a1,1
      a8:	c291                	beqz	a3,ac <__mulsi3+0xc>
      aa:	9532                	add	a0,a0,a2
      ac:	8185                	srl	a1,a1,0x1
      ae:	0606                	sll	a2,a2,0x1
      b0:	f9f5                	bnez	a1,a4 <__mulsi3+0x4>
      b2:	8082                	ret
      b4:	0000                	unimp
	...

000000b8 <__divsi3>:
      b8:	02054e63          	bltz	a0,f4 <__umodsi3+0x8>
      bc:	0405c363          	bltz	a1,102 <__umodsi3+0x16>

000000c0 <__hidden___udivsi3>:
      c0:	862e                	mv	a2,a1
      c2:	85aa                	mv	a1,a0
      c4:	557d                	li	a0,-1
      c6:	c215                	beqz	a2,ea <__hidden___udivsi3+0x2a>
      c8:	4685                	li	a3,1
      ca:	00b67863          	bgeu	a2,a1,da <__hidden___udivsi3+0x1a>
      ce:	00c05663          	blez	a2,da <__hidden___udivsi3+0x1a>
      d2:	0606                	sll	a2,a2,0x1
      d4:	0686                	sll	a3,a3,0x1
      d6:	feb66ce3          	bltu	a2,a1,ce <__hidden___udivsi3+0xe>
      da:	4501                	li	a0,0
      dc:	00c5e463          	bltu	a1,a2,e4 <__hidden___udivsi3+0x24>
      e0:	8d91                	sub	a1,a1,a2
      e2:	8d55                	or	a0,a0,a3
      e4:	8285                	srl	a3,a3,0x1
      e6:	8205                	srl	a2,a2,0x1
      e8:	faf5                	bnez	a3,dc <__hidden___udivsi3+0x1c>
      ea:	8082                	ret

000000ec <__umodsi3>:
      ec:	8286                	mv	t0,ra
      ee:	3fc9                	jal	c0 <__hidden___udivsi3>
      f0:	852e                	mv	a0,a1
      f2:	8282                	jr	t0
      f4:	40a00533          	neg	a0,a0
      f8:	00b04763          	bgtz	a1,106 <__umodsi3+0x1a>
      fc:	40b005b3          	neg	a1,a1
     100:	b7c1                	j	c0 <__hidden___udivsi3>
     102:	40b005b3          	neg	a1,a1
     106:	8286                	mv	t0,ra
     108:	3f65                	jal	c0 <__hidden___udivsi3>
     10a:	40a00533          	neg	a0,a0
     10e:	8282                	jr	t0

00000110 <__modsi3>:
     110:	8286                	mv	t0,ra
     112:	0005c763          	bltz	a1,120 <__modsi3+0x10>
     116:	00054963          	bltz	a0,128 <__modsi3+0x18>
     11a:	375d                	jal	c0 <__hidden___udivsi3>
     11c:	852e                	mv	a0,a1
     11e:	8282                	jr	t0
     120:	40b005b3          	neg	a1,a1
     124:	fe055be3          	bgez	a0,11a <__modsi3+0xa>
     128:	40a00533          	neg	a0,a0
     12c:	3f51                	jal	c0 <__hidden___udivsi3>
     12e:	40b00533          	neg	a0,a1
     132:	8282                	jr	t0
	...

00000136 <mini_pad>:
     136:	1131                	add	sp,sp,-20
     138:	c426                	sw	s1,8(sp)
     13a:	c806                	sw	ra,16(sp)
     13c:	c622                	sw	s0,12(sp)
     13e:	84ae                	mv	s1,a1
     140:	87aa                	mv	a5,a0
     142:	85b2                	mv	a1,a2
     144:	c699                	beqz	a3,152 <mini_pad+0x1c>
     146:	4301                	li	t1,0
     148:	0096d763          	bge	a3,s1,156 <mini_pad+0x20>
     14c:	84b6                	mv	s1,a3
     14e:	4305                	li	t1,1
     150:	a019                	j	156 <mini_pad+0x20>
     152:	4301                	li	t1,0
     154:	86a6                	mv	a3,s1
     156:	40968433          	sub	s0,a3,s1
     15a:	00045363          	bgez	s0,160 <mini_pad+0x2a>
     15e:	4401                	li	s0,0
     160:	8622                	mv	a2,s0
     162:	853a                	mv	a0,a4
     164:	c23e                	sw	a5,4(sp)
     166:	c01a                	sw	t1,0(sp)
     168:	78c000ef          	jal	8f4 <memset>
     16c:	4302                	lw	t1,0(sp)
     16e:	4792                	lw	a5,4(sp)
     170:	872a                	mv	a4,a0
     172:	008506b3          	add	a3,a0,s0
     176:	4601                	li	a2,0
     178:	40c485b3          	sub	a1,s1,a2
     17c:	04b04263          	bgtz	a1,1c0 <mini_pad+0x8a>
     180:	0004d363          	bgez	s1,186 <mini_pad+0x50>
     184:	4481                	li	s1,0
     186:	009685b3          	add	a1,a3,s1
     18a:	40e58533          	sub	a0,a1,a4
     18e:	02030463          	beqz	t1,1b6 <mini_pad+0x80>
     192:	02b77263          	bgeu	a4,a1,1b6 <mini_pad+0x80>
     196:	02a00793          	li	a5,42
     19a:	fef58fa3          	sb	a5,-1(a1)
     19e:	fff58693          	add	a3,a1,-1
     1a2:	00d77a63          	bgeu	a4,a3,1b6 <mini_pad+0x80>
     1a6:	fef58f23          	sb	a5,-2(a1)
     1aa:	ffe58693          	add	a3,a1,-2
     1ae:	00d77463          	bgeu	a4,a3,1b6 <mini_pad+0x80>
     1b2:	fef58ea3          	sb	a5,-3(a1)
     1b6:	40c2                	lw	ra,16(sp)
     1b8:	4432                	lw	s0,12(sp)
     1ba:	44a2                	lw	s1,8(sp)
     1bc:	0151                	add	sp,sp,20
     1be:	8082                	ret
     1c0:	00c785b3          	add	a1,a5,a2
     1c4:	0005c503          	lbu	a0,0(a1)
     1c8:	00c685b3          	add	a1,a3,a2
     1cc:	0605                	add	a2,a2,1
     1ce:	00a58023          	sb	a0,0(a1)
     1d2:	b75d                	j	178 <mini_pad+0x42>

000001d4 <DelaySysTick>:
     1d4:	e000f7b7          	lui	a5,0xe000f
     1d8:	479c                	lw	a5,8(a5)
     1da:	e000f737          	lui	a4,0xe000f
     1de:	953e                	add	a0,a0,a5
     1e0:	471c                	lw	a5,8(a4)
     1e2:	8f89                	sub	a5,a5,a0
     1e4:	fe07cee3          	bltz	a5,1e0 <DelaySysTick+0xc>
     1e8:	8082                	ret

000001ea <mini_itoa.part.0>:
     1ea:	1101                	add	sp,sp,-32
     1ec:	ce06                	sw	ra,28(sp)
     1ee:	cc22                	sw	s0,24(sp)
     1f0:	ca26                	sw	s1,20(sp)
     1f2:	c002                	sw	zero,0(sp)
     1f4:	832a                	mv	t1,a0
     1f6:	00055763          	bgez	a0,204 <mini_itoa.part.0+0x1a>
     1fa:	e689                	bnez	a3,204 <mini_itoa.part.0+0x1a>
     1fc:	4785                	li	a5,1
     1fe:	40a00333          	neg	t1,a0
     202:	c03e                	sw	a5,0(sp)
     204:	8a05                	and	a2,a2,1
     206:	06100413          	li	s0,97
     20a:	c219                	beqz	a2,210 <mini_itoa.part.0+0x26>
     20c:	04100413          	li	s0,65
     210:	84ba                	mv	s1,a4
     212:	1459                	add	s0,s0,-10
     214:	851a                	mv	a0,t1
     216:	c83a                	sw	a4,16(sp)
     218:	c21a                	sw	t1,4(sp)
     21a:	c62e                	sw	a1,12(sp)
     21c:	c41a                	sw	t1,8(sp)
     21e:	35f9                	jal	ec <__umodsi3>
     220:	47a5                	li	a5,9
     222:	4322                	lw	t1,8(sp)
     224:	45b2                	lw	a1,12(sp)
     226:	4742                	lw	a4,16(sp)
     228:	0ff57693          	zext.b	a3,a0
     22c:	06a7e163          	bltu	a5,a0,28e <mini_itoa.part.0+0xa4>
     230:	03068693          	add	a3,a3,48
     234:	0ff6f693          	zext.b	a3,a3
     238:	00148793          	add	a5,s1,1
     23c:	00d48023          	sb	a3,0(s1)
     240:	851a                	mv	a0,t1
     242:	c83a                	sw	a4,16(sp)
     244:	c63e                	sw	a5,12(sp)
     246:	c42e                	sw	a1,8(sp)
     248:	3da5                	jal	c0 <__hidden___udivsi3>
     24a:	4692                	lw	a3,4(sp)
     24c:	45a2                	lw	a1,8(sp)
     24e:	47b2                	lw	a5,12(sp)
     250:	4742                	lw	a4,16(sp)
     252:	832a                	mv	t1,a0
     254:	02b6fb63          	bgeu	a3,a1,28a <mini_itoa.part.0+0xa0>
     258:	4682                	lw	a3,0(sp)
     25a:	c699                	beqz	a3,268 <mini_itoa.part.0+0x7e>
     25c:	02d00693          	li	a3,45
     260:	00d78023          	sb	a3,0(a5) # e000f000 <__global_pointer$+0xc000e800>
     264:	00248793          	add	a5,s1,2
     268:	40e78533          	sub	a0,a5,a4
     26c:	01f55693          	srl	a3,a0,0x1f
     270:	96aa                	add	a3,a3,a0
     272:	00078023          	sb	zero,0(a5)
     276:	8685                	sra	a3,a3,0x1
     278:	4601                	li	a2,0
     27a:	17fd                	add	a5,a5,-1
     27c:	00d64b63          	blt	a2,a3,292 <mini_itoa.part.0+0xa8>
     280:	40f2                	lw	ra,28(sp)
     282:	4462                	lw	s0,24(sp)
     284:	44d2                	lw	s1,20(sp)
     286:	6105                	add	sp,sp,32
     288:	8082                	ret
     28a:	84be                	mv	s1,a5
     28c:	b761                	j	214 <mini_itoa.part.0+0x2a>
     28e:	96a2                	add	a3,a3,s0
     290:	b755                	j	234 <mini_itoa.part.0+0x4a>
     292:	00c705b3          	add	a1,a4,a2
     296:	0007c283          	lbu	t0,0(a5)
     29a:	0005c303          	lbu	t1,0(a1)
     29e:	0605                	add	a2,a2,1
     2a0:	00558023          	sb	t0,0(a1)
     2a4:	00678023          	sb	t1,0(a5)
     2a8:	bfc9                	j	27a <mini_itoa.part.0+0x90>

000002aa <ssd1306_i2c_setup>:
void ssd1306_i2c_setup(void)
{
	uint16_t tempreg;
	
	// Reset I2C1 to init all regs
	RCC->APB1PRSTR |= RCC_APB1Periph_I2C1;
     2aa:	400217b7          	lui	a5,0x40021
     2ae:	4b98                	lw	a4,16(a5)
     2b0:	002006b7          	lui	a3,0x200
     2b4:	8f55                	or	a4,a4,a3
     2b6:	cb98                	sw	a4,16(a5)
	RCC->APB1PRSTR &= ~RCC_APB1Periph_I2C1;
     2b8:	4b98                	lw	a4,16(a5)
     2ba:	ffe006b7          	lui	a3,0xffe00
     2be:	16fd                	add	a3,a3,-1 # ffdfffff <__global_pointer$+0xdfdff7ff>
     2c0:	8f75                	and	a4,a4,a3
     2c2:	cb98                	sw	a4,16(a5)
	
	// set freq
	tempreg = I2C1->CTLR2;
     2c4:	400057b7          	lui	a5,0x40005
     2c8:	4047d703          	lhu	a4,1028(a5) # 40005404 <__global_pointer$+0x20004c04>
	tempreg &= ~I2C_CTLR2_FREQ;
     2cc:	66c1                	lui	a3,0x10
     2ce:	fc068693          	add	a3,a3,-64 # ffc0 <main.c.57da8798+0xdbd7>
     2d2:	8f75                	and	a4,a4,a3
	tempreg |= (FUNCONF_SYSTEM_CORE_CLOCK/SSD1306_I2C_PRERATE)&I2C_CTLR2_FREQ;
     2d4:	01876713          	or	a4,a4,24
	I2C1->CTLR2 = tempreg;
     2d8:	40e79223          	sh	a4,1028(a5)
	tempreg = (FUNCONF_SYSTEM_CORE_CLOCK/(25*SSD1306_I2C_CLKRATE))&I2C_CKCFGR_CCR;
	tempreg |= I2C_CKCFGR_DUTY;
#endif
	tempreg |= I2C_CKCFGR_FS;
#endif
	I2C1->CKCFGR = tempreg;
     2dc:	7771                	lui	a4,0xffffc
     2de:	0705                	add	a4,a4,1 # ffffc001 <__global_pointer$+0xdfffb801>
     2e0:	40e79e23          	sh	a4,1052(a5)
	// initialize the state
	ssd1306_i2c_irq_state = 0;
#endif
	
	// Enable I2C
	I2C1->CTLR1 |= I2C_CTLR1_PE;
     2e4:	4007d703          	lhu	a4,1024(a5)
     2e8:	00176713          	or	a4,a4,1
     2ec:	40e79023          	sh	a4,1024(a5)

	// set ACK mode
	I2C1->CTLR1 |= I2C_CTLR1_ACK;
     2f0:	4007d703          	lhu	a4,1024(a5)
     2f4:	40076713          	or	a4,a4,1024
     2f8:	40e79023          	sh	a4,1024(a5)
}
     2fc:	8082                	ret

000002fe <ssd1306_drawImage.constprop.0>:

/*
 * draw a an image from an array, directly into to the display buffer
 * the color modes allow for overwriting and even layering (sprites!)
 */
void ssd1306_drawImage(uint8_t x, uint8_t y, const unsigned char* input, uint8_t width, uint8_t height, uint8_t color_mode) {
     2fe:	fd410113          	add	sp,sp,-44
	uint8_t x_absolute;
	uint8_t y_absolute;
	uint8_t pixel;
	uint8_t bytes_to_draw = width / 8;
     302:	0036d793          	srl	a5,a3,0x3
     306:	c03e                	sw	a5,0(sp)
void ssd1306_drawImage(uint8_t x, uint8_t y, const unsigned char* input, uint8_t width, uint8_t height, uint8_t color_mode) {
     308:	d406                	sw	ra,40(sp)
     30a:	d222                	sw	s0,36(sp)
     30c:	d026                	sw	s1,32(sp)
     30e:	c22a                	sw	a0,4(sp)
     310:	c832                	sw	a2,16(sp)
     312:	ca3a                	sw	a4,20(sp)
	uint16_t buffer_addr;

	for (uint8_t line = 0; line < height; line++) {
		y_absolute = y + line;
		if (y_absolute >= SSD1306_H) {
     314:	03f00793          	li	a5,63
     318:	0cb7e763          	bltu	a5,a1,3e6 <ssd1306_drawImage.constprop.0+0xe8>
     31c:	4782                	lw	a5,0(sp)
     31e:	20000737          	lui	a4,0x20000
     322:	00070713          	mv	a4,a4
     326:	078e                	sll	a5,a5,0x3
     328:	97aa                	add	a5,a5,a0
     32a:	0ff7f793          	zext.b	a5,a5
     32e:	c63e                	sw	a5,12(sp)
     330:	84ae                	mv	s1,a1
		y_absolute = y + line;
     332:	87ae                	mv	a5,a1
	for (uint8_t line = 0; line < height; line++) {
     334:	4401                	li	s0,0
     336:	cc3a                	sw	a4,24(sp)
		// SSD1306 is in vertical mode, yet we want to draw horizontally, which necessitates assembling the output bytes from the input data
		// bitmask for current pixel in vertical (output) byte
		uint8_t v_mask = 1 << (y_absolute & 7);

		for (uint8_t byte = 0; byte < bytes_to_draw; byte++) {
			uint8_t input_byte = input[byte + line * bytes_to_draw];
     338:	4582                	lw	a1,0(sp)
		uint8_t v_mask = 1 << (y_absolute & 7);
     33a:	4705                	li	a4,1
     33c:	0077f693          	and	a3,a5,7
				x_absolute = x + 8 * (bytes_to_draw - byte) + pixel;
				if (x_absolute >= SSD1306_W) {
					break;
				}
				// looking at the horizontal display, we're drawing bytes bottom to top, not left to right, hence y / 8
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     340:	838d                	srl	a5,a5,0x3
		uint8_t v_mask = 1 << (y_absolute & 7);
     342:	00d716b3          	sll	a3,a4,a3
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     346:	079e                	sll	a5,a5,0x7
			uint8_t input_byte = input[byte + line * bytes_to_draw];
     348:	8522                	mv	a0,s0
		uint8_t v_mask = 1 << (y_absolute & 7);
     34a:	ce36                	sw	a3,28(sp)
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     34c:	c43e                	sw	a5,8(sp)
			uint8_t input_byte = input[byte + line * bytes_to_draw];
     34e:	3b89                	jal	a0 <__mulsi3>
				uint8_t input_pixel = input_byte & (1 << pixel);

				switch (color_mode) {
					case 0:
						// write pixels as they are
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     350:	46f2                	lw	a3,28(sp)
     352:	47c2                	lw	a5,16(sp)
     354:	06e2                	sll	a3,a3,0x18
     356:	953e                	add	a0,a0,a5
     358:	86e1                	sra	a3,a3,0x18
				buffer_addr = x_absolute + SSD1306_W * (y_absolute / 8);
     35a:	47b2                	lw	a5,12(sp)
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     35c:	fff6c713          	not	a4,a3
     360:	ce3a                	sw	a4,28(sp)
			uint8_t input_byte = input[byte + line * bytes_to_draw];
     362:	00054703          	lbu	a4,0(a0)
     366:	83ba                	mv	t2,a4
				if (x_absolute >= SSD1306_W) {
     368:	01879713          	sll	a4,a5,0x18
     36c:	8761                	sra	a4,a4,0x18
     36e:	04074763          	bltz	a4,3bc <ssd1306_drawImage.constprop.0+0xbe>
     372:	4722                	lw	a4,8(sp)
     374:	4581                	li	a1,0
     376:	00e78633          	add	a2,a5,a4
     37a:	4762                	lw	a4,24(sp)
     37c:	963a                	add	a2,a2,a4
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     37e:	4372                	lw	t1,28(sp)
     380:	00064703          	lbu	a4,0(a2)
     384:	82b6                	mv	t0,a3
     386:	00677733          	and	a4,a4,t1
				uint8_t input_pixel = input_byte & (1 << pixel);
     38a:	4305                	li	t1,1
     38c:	00b31333          	sll	t1,t1,a1
						ssd1306_buffer[buffer_addr] = (ssd1306_buffer[buffer_addr] & ~v_mask) | (input_pixel ? v_mask : 0);
     390:	0762                	sll	a4,a4,0x18
     392:	0063f333          	and	t1,t2,t1
     396:	8761                	sra	a4,a4,0x18
     398:	00031363          	bnez	t1,39e <ssd1306_drawImage.constprop.0+0xa0>
     39c:	4281                	li	t0,0
     39e:	00576733          	or	a4,a4,t0
     3a2:	00e60023          	sb	a4,0(a2)
			for (pixel = 0; pixel < 8; pixel++) {
     3a6:	471d                	li	a4,7
     3a8:	00e58a63          	beq	a1,a4,3bc <ssd1306_drawImage.constprop.0+0xbe>
				if (x_absolute >= SSD1306_W) {
     3ac:	0585                	add	a1,a1,1
     3ae:	00b78733          	add	a4,a5,a1
     3b2:	0762                	sll	a4,a4,0x18
     3b4:	8761                	sra	a4,a4,0x18
     3b6:	0605                	add	a2,a2,1
     3b8:	fc0753e3          	bgez	a4,37e <ssd1306_drawImage.constprop.0+0x80>
		for (uint8_t byte = 0; byte < bytes_to_draw; byte++) {
     3bc:	4712                	lw	a4,4(sp)
     3be:	17e1                	add	a5,a5,-8
     3c0:	0ff7f793          	zext.b	a5,a5
     3c4:	0505                	add	a0,a0,1
     3c6:	f8f71ee3          	bne	a4,a5,362 <ssd1306_drawImage.constprop.0+0x64>
	for (uint8_t line = 0; line < height; line++) {
     3ca:	47d2                	lw	a5,20(sp)
     3cc:	0405                	add	s0,s0,1
     3ce:	0ff47413          	zext.b	s0,s0
     3d2:	00f47a63          	bgeu	s0,a5,3e6 <ssd1306_drawImage.constprop.0+0xe8>
		y_absolute = y + line;
     3d6:	008487b3          	add	a5,s1,s0
     3da:	0ff7f793          	zext.b	a5,a5
		if (y_absolute >= SSD1306_H) {
     3de:	03f00713          	li	a4,63
     3e2:	f4f77be3          	bgeu	a4,a5,338 <ssd1306_drawImage.constprop.0+0x3a>
		}
		#if SSD1306_LOG_IMAGE == 1
		printf("\n\r");
		#endif
	}
}
     3e6:	50a2                	lw	ra,40(sp)
     3e8:	5412                	lw	s0,36(sp)
     3ea:	5482                	lw	s1,32(sp)
     3ec:	02c10113          	add	sp,sp,44
     3f0:	8082                	ret

000003f2 <ssd1306_drawPixel.constprop.0>:
	if(x >= SSD1306_W)
     3f2:	01851793          	sll	a5,a0,0x18
     3f6:	87e1                	sra	a5,a5,0x18
     3f8:	0207c863          	bltz	a5,428 <ssd1306_drawPixel.constprop.0+0x36>
	if(y >= SSD1306_H)
     3fc:	03f00793          	li	a5,63
     400:	02b7e463          	bltu	a5,a1,428 <ssd1306_drawPixel.constprop.0+0x36>
	addr = x + SSD1306_W*(y/8);
     404:	0035d793          	srl	a5,a1,0x3
     408:	079e                	sll	a5,a5,0x7
		ssd1306_buffer[addr] |= (1<<(y&7));
     40a:	953e                	add	a0,a0,a5
     40c:	200007b7          	lui	a5,0x20000
     410:	00078793          	mv	a5,a5
     414:	97aa                	add	a5,a5,a0
     416:	0007c683          	lbu	a3,0(a5) # 20000000 <ssd1306_buffer>
     41a:	899d                	and	a1,a1,7
     41c:	4705                	li	a4,1
     41e:	00b71733          	sll	a4,a4,a1
     422:	8f55                	or	a4,a4,a3
     424:	00e78023          	sb	a4,0(a5)
}
     428:	8082                	ret

0000042a <internal_handle_input.constprop.0>:
     42a:	e00007b7          	lui	a5,0xe0000
     42e:	0f478793          	add	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
     432:	439c                	lw	a5,0(a5)
     434:	8082                	ret

00000436 <_write.constprop.0>:
     436:	1101                	add	sp,sp,-32
     438:	cc22                	sw	s0,24(sp)
     43a:	ce06                	sw	ra,28(sp)
     43c:	ca26                	sw	s1,20(sp)
     43e:	c02a                	sw	a0,0(sp)
     440:	c802                	sw	zero,16(sp)
     442:	842e                	mv	s0,a1
     444:	e1f9                	bnez	a1,50a <_write.constprop.0+0xd4>
     446:	e00007b7          	lui	a5,0xe0000
     44a:	0f478793          	add	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
     44e:	439c                	lw	a5,0(a5)
     450:	c789                	beqz	a5,45a <_write.constprop.0+0x24>
     452:	0807f793          	and	a5,a5,128
     456:	e391                	bnez	a5,45a <_write.constprop.0+0x24>
     458:	3fc9                	jal	42a <internal_handle_input.constprop.0>
     45a:	40f2                	lw	ra,28(sp)
     45c:	8522                	mv	a0,s0
     45e:	4462                	lw	s0,24(sp)
     460:	44d2                	lw	s1,20(sp)
     462:	6105                	add	sp,sp,32
     464:	8082                	ret
     466:	409406b3          	sub	a3,s0,s1
     46a:	461d                	li	a2,7
     46c:	8736                	mv	a4,a3
     46e:	00d65363          	bge	a2,a3,474 <_write.constprop.0+0x3e>
     472:	471d                	li	a4,7
     474:	00027637          	lui	a2,0x27
     478:	10160613          	add	a2,a2,257 # 27101 <main.c.57da8798+0x24d18>
     47c:	00032583          	lw	a1,0(t1)
     480:	0805f513          	and	a0,a1,128
     484:	ed3d                	bnez	a0,502 <_write.constprop.0+0xcc>
     486:	c981                	beqz	a1,496 <_write.constprop.0+0x60>
     488:	c61a                	sw	t1,12(sp)
     48a:	c43a                	sw	a4,8(sp)
     48c:	c236                	sw	a3,4(sp)
     48e:	3f71                	jal	42a <internal_handle_input.constprop.0>
     490:	4332                	lw	t1,12(sp)
     492:	4722                	lw	a4,8(sp)
     494:	4692                	lw	a3,4(sp)
     496:	0036a693          	slti	a3,a3,3
     49a:	4601                	li	a2,0
     49c:	e299                	bnez	a3,4a2 <_write.constprop.0+0x6c>
     49e:	ffd70613          	add	a2,a4,-3 # 1ffffffd <main.c.57da8798+0x1fffdc14>
     4a2:	4782                	lw	a5,0(sp)
     4a4:	00348593          	add	a1,s1,3
     4a8:	0808                	add	a0,sp,16
     4aa:	95be                	add	a1,a1,a5
     4ac:	c41a                	sw	t1,8(sp)
     4ae:	c23a                	sw	a4,4(sp)
     4b0:	2999                	jal	906 <memcpy>
     4b2:	4642                	lw	a2,16(sp)
     4b4:	4782                	lw	a5,0(sp)
     4b6:	e00006b7          	lui	a3,0xe0000
     4ba:	4322                	lw	t1,8(sp)
     4bc:	4712                	lw	a4,4(sp)
     4be:	0f868693          	add	a3,a3,248 # e00000f8 <__global_pointer$+0xbffff8f8>
     4c2:	c290                	sw	a2,0(a3)
     4c4:	458d                	li	a1,3
     4c6:	00978633          	add	a2,a5,s1
     4ca:	4681                	li	a3,0
     4cc:	00064283          	lbu	t0,0(a2)
     4d0:	0685                	add	a3,a3,1
     4d2:	01068793          	add	a5,a3,16
     4d6:	00278533          	add	a0,a5,sp
     4da:	00550023          	sb	t0,0(a0)
     4de:	00d70563          	beq	a4,a3,4e8 <_write.constprop.0+0xb2>
     4e2:	0605                	add	a2,a2,1
     4e4:	feb694e3          	bne	a3,a1,4cc <_write.constprop.0+0x96>
     4e8:	00470693          	add	a3,a4,4
     4ec:	f806e693          	or	a3,a3,-128
     4f0:	00d10823          	sb	a3,16(sp)
     4f4:	46c2                	lw	a3,16(sp)
     4f6:	94ba                	add	s1,s1,a4
     4f8:	00d32023          	sw	a3,0(t1)
     4fc:	f684c5e3          	blt	s1,s0,466 <_write.constprop.0+0x30>
     500:	bfa9                	j	45a <_write.constprop.0+0x24>
     502:	167d                	add	a2,a2,-1
     504:	fe25                	bnez	a2,47c <_write.constprop.0+0x46>
     506:	8426                	mv	s0,s1
     508:	bf89                	j	45a <_write.constprop.0+0x24>
     50a:	e0000337          	lui	t1,0xe0000
     50e:	4481                	li	s1,0
     510:	0f430313          	add	t1,t1,244 # e00000f4 <__global_pointer$+0xbffff8f4>
     514:	b7e5                	j	4fc <_write.constprop.0+0xc6>

00000516 <__puts_uart>:
     516:	1151                	add	sp,sp,-12
     518:	c222                	sw	s0,4(sp)
     51a:	c406                	sw	ra,8(sp)
     51c:	842e                	mv	s0,a1
     51e:	3f21                	jal	436 <_write.constprop.0>
     520:	40a2                	lw	ra,8(sp)
     522:	8522                	mv	a0,s0
     524:	4412                	lw	s0,4(sp)
     526:	0131                	add	sp,sp,12
     528:	8082                	ret

0000052a <handle_reset>:
     52a:	20000197          	auipc	gp,0x20000
     52e:	2d618193          	add	gp,gp,726 # 20000800 <__global_pointer$>
     532:	00018113          	mv	sp,gp
     536:	08000513          	li	a0,128
     53a:	30051073          	csrw	mstatus,a0
     53e:	468d                	li	a3,3
     540:	00000517          	auipc	a0,0x0
     544:	ac050513          	add	a0,a0,-1344 # 0 <InterruptVector>
     548:	8d55                	or	a0,a0,a3
     54a:	30551073          	csrw	mtvec,a0
     54e:	20000517          	auipc	a0,0x20000
     552:	ab250513          	add	a0,a0,-1358 # 20000000 <ssd1306_buffer>
     556:	c0018593          	add	a1,gp,-1024 # 20000400 <_ebss>
     55a:	4601                	li	a2,0
     55c:	00b55663          	bge	a0,a1,568 <handle_reset+0x3e>
     560:	c110                	sw	a2,0(a0)
     562:	0511                	add	a0,a0,4
     564:	feb54ee3          	blt	a0,a1,560 <handle_reset+0x36>
     568:	00001517          	auipc	a0,0x1
     56c:	d1450513          	add	a0,a0,-748 # 127c <_data_lma>
     570:	20000597          	auipc	a1,0x20000
     574:	a9058593          	add	a1,a1,-1392 # 20000000 <ssd1306_buffer>
     578:	20000617          	auipc	a2,0x20000
     57c:	a8860613          	add	a2,a2,-1400 # 20000000 <ssd1306_buffer>
     580:	00c58863          	beq	a1,a2,590 <handle_reset+0x66>
     584:	4114                	lw	a3,0(a0)
     586:	c194                	sw	a3,0(a1)
     588:	0511                	add	a0,a0,4
     58a:	0591                	add	a1,a1,4
     58c:	fec59ae3          	bne	a1,a2,580 <handle_reset+0x56>
     590:	e000f7b7          	lui	a5,0xe000f
     594:	4705                	li	a4,1
     596:	c398                	sw	a4,0(a5)
     598:	6785                	lui	a5,0x1
     59a:	9e478793          	add	a5,a5,-1564 # 9e4 <main>
     59e:	34179073          	csrw	mepc,a5
     5a2:	30200073          	mret

000005a6 <ADC1_IRQHandler>:
     5a6:	a001                	j	5a6 <ADC1_IRQHandler>

000005a8 <NMI_Handler>:
     5a8:	40021737          	lui	a4,0x40021
     5ac:	471c                	lw	a5,8(a4)
     5ae:	008006b7          	lui	a3,0x800
     5b2:	8fd5                	or	a5,a5,a3
     5b4:	c71c                	sw	a5,8(a4)

000005b6 <strlen>:
     5b6:	87aa                	mv	a5,a0
     5b8:	0007c703          	lbu	a4,0(a5)
     5bc:	e701                	bnez	a4,5c4 <strlen+0xe>
     5be:	40a78533          	sub	a0,a5,a0
     5c2:	8082                	ret
     5c4:	0785                	add	a5,a5,1
     5c6:	bfcd                	j	5b8 <strlen+0x2>

000005c8 <mini_vpprintf>:
     5c8:	fa410113          	add	sp,sp,-92
     5cc:	caa2                	sw	s0,84(sp)
     5ce:	c8a6                	sw	s1,80(sp)
     5d0:	cc86                	sw	ra,88(sp)
     5d2:	c02a                	sw	a0,0(sp)
     5d4:	c22e                	sw	a1,4(sp)
     5d6:	8432                	mv	s0,a2
     5d8:	84b6                	mv	s1,a3
     5da:	ca02                	sw	zero,20(sp)
     5dc:	00044783          	lbu	a5,0(s0)
     5e0:	00140693          	add	a3,s0,1
     5e4:	00f10fa3          	sb	a5,31(sp)
     5e8:	eb81                	bnez	a5,5f8 <mini_vpprintf+0x30>
     5ea:	40e6                	lw	ra,88(sp)
     5ec:	4456                	lw	s0,84(sp)
     5ee:	4552                	lw	a0,20(sp)
     5f0:	44c6                	lw	s1,80(sp)
     5f2:	05c10113          	add	sp,sp,92
     5f6:	8082                	ret
     5f8:	c636                	sw	a3,12(sp)
     5fa:	02500713          	li	a4,37
     5fe:	02e78063          	beq	a5,a4,61e <mini_vpprintf+0x56>
     602:	4612                	lw	a2,4(sp)
     604:	4782                	lw	a5,0(sp)
     606:	4585                	li	a1,1
     608:	01f10513          	add	a0,sp,31
     60c:	9782                	jalr	a5
     60e:	46b2                	lw	a3,12(sp)
     610:	c426                	sw	s1,8(sp)
     612:	8436                	mv	s0,a3
     614:	47d2                	lw	a5,20(sp)
     616:	44a2                	lw	s1,8(sp)
     618:	97aa                	add	a5,a5,a0
     61a:	ca3e                	sw	a5,20(sp)
     61c:	b7c1                	j	5dc <mini_vpprintf+0x14>
     61e:	00144703          	lbu	a4,1(s0)
     622:	03000613          	li	a2,48
     626:	03000693          	li	a3,48
     62a:	00e10fa3          	sb	a4,31(sp)
     62e:	c632                	sw	a2,12(sp)
     630:	00240793          	add	a5,s0,2
     634:	08d71263          	bne	a4,a3,6b8 <mini_vpprintf+0xf0>
     638:	843e                	mv	s0,a5
     63a:	4681                	li	a3,0
     63c:	4781                	li	a5,0
     63e:	45a5                	li	a1,9
     640:	a811                	j	654 <mini_vpprintf+0x8c>
     642:	00279713          	sll	a4,a5,0x2
     646:	0405                	add	s0,s0,1
     648:	97ba                	add	a5,a5,a4
     64a:	fff44703          	lbu	a4,-1(s0)
     64e:	0786                	sll	a5,a5,0x1
     650:	97b2                	add	a5,a5,a2
     652:	4685                	li	a3,1
     654:	fd070613          	add	a2,a4,-48 # 40020fd0 <__global_pointer$+0x200207d0>
     658:	0ff67513          	zext.b	a0,a2
     65c:	fea5f3e3          	bgeu	a1,a0,642 <mini_vpprintf+0x7a>
     660:	c299                	beqz	a3,666 <mini_vpprintf+0x9e>
     662:	00e10fa3          	sb	a4,31(sp)
     666:	c83e                	sw	a5,16(sp)
     668:	46e1                	li	a3,24
     66a:	00f6d363          	bge	a3,a5,670 <mini_vpprintf+0xa8>
     66e:	c836                	sw	a3,16(sp)
     670:	06c00613          	li	a2,108
     674:	4681                	li	a3,0
     676:	00c71863          	bne	a4,a2,686 <mini_vpprintf+0xbe>
     67a:	00044703          	lbu	a4,0(s0)
     67e:	4685                	li	a3,1
     680:	0405                	add	s0,s0,1
     682:	00e10fa3          	sb	a4,31(sp)
     686:	01f14603          	lbu	a2,31(sp)
     68a:	06400713          	li	a4,100
     68e:	06e60563          	beq	a2,a4,6f8 <mini_vpprintf+0x130>
     692:	02c76763          	bltu	a4,a2,6c0 <mini_vpprintf+0xf8>
     696:	05800793          	li	a5,88
     69a:	0af60063          	beq	a2,a5,73a <mini_vpprintf+0x172>
     69e:	06300793          	li	a5,99
     6a2:	0af60d63          	beq	a2,a5,75c <mini_vpprintf+0x194>
     6a6:	d231                	beqz	a2,5ea <mini_vpprintf+0x22>
     6a8:	4612                	lw	a2,4(sp)
     6aa:	4782                	lw	a5,0(sp)
     6ac:	4585                	li	a1,1
     6ae:	01f10513          	add	a0,sp,31
     6b2:	9782                	jalr	a5
     6b4:	c426                	sw	s1,8(sp)
     6b6:	bfb9                	j	614 <mini_vpprintf+0x4c>
     6b8:	02000693          	li	a3,32
     6bc:	c636                	sw	a3,12(sp)
     6be:	bfad                	j	638 <mini_vpprintf+0x70>
     6c0:	07500713          	li	a4,117
     6c4:	02e60a63          	beq	a2,a4,6f8 <mini_vpprintf+0x130>
     6c8:	07800713          	li	a4,120
     6cc:	06e60763          	beq	a2,a4,73a <mini_vpprintf+0x172>
     6d0:	07300713          	li	a4,115
     6d4:	fce61ae3          	bne	a2,a4,6a8 <mini_vpprintf+0xe0>
     6d8:	cc3e                	sw	a5,24(sp)
     6da:	00448793          	add	a5,s1,4
     6de:	4084                	lw	s1,0(s1)
     6e0:	c43e                	sw	a5,8(sp)
     6e2:	8526                	mv	a0,s1
     6e4:	3dc9                	jal	5b6 <strlen>
     6e6:	47e2                	lw	a5,24(sp)
     6e8:	85aa                	mv	a1,a0
     6ea:	08f05663          	blez	a5,776 <mini_vpprintf+0x1ae>
     6ee:	46c2                	lw	a3,16(sp)
     6f0:	4632                	lw	a2,12(sp)
     6f2:	1838                	add	a4,sp,56
     6f4:	8526                	mv	a0,s1
     6f6:	a01d                	j	71c <mini_vpprintf+0x154>
     6f8:	00448793          	add	a5,s1,4
     6fc:	c43e                	sw	a5,8(sp)
     6fe:	c695                	beqz	a3,72a <mini_vpprintf+0x162>
     700:	f8b60613          	add	a2,a2,-117
     704:	1018                	add	a4,sp,32
     706:	00163693          	seqz	a3,a2
     70a:	4088                	lw	a0,0(s1)
     70c:	4601                	li	a2,0
     70e:	45a9                	li	a1,10
     710:	3ce9                	jal	1ea <mini_itoa.part.0>
     712:	46c2                	lw	a3,16(sp)
     714:	4632                	lw	a2,12(sp)
     716:	1838                	add	a4,sp,56
     718:	85aa                	mv	a1,a0
     71a:	1008                	add	a0,sp,32
     71c:	3c29                	jal	136 <mini_pad>
     71e:	4612                	lw	a2,4(sp)
     720:	85aa                	mv	a1,a0
     722:	1828                	add	a0,sp,56
     724:	4782                	lw	a5,0(sp)
     726:	9782                	jalr	a5
     728:	b5f5                	j	614 <mini_vpprintf+0x4c>
     72a:	07500793          	li	a5,117
     72e:	1018                	add	a4,sp,32
     730:	4685                	li	a3,1
     732:	fcf60ce3          	beq	a2,a5,70a <mini_vpprintf+0x142>
     736:	4681                	li	a3,0
     738:	bfc9                	j	70a <mini_vpprintf+0x142>
     73a:	4088                	lw	a0,0(s1)
     73c:	fa860613          	add	a2,a2,-88
     740:	00448793          	add	a5,s1,4
     744:	1018                	add	a4,sp,32
     746:	4685                	li	a3,1
     748:	00163613          	seqz	a2,a2
     74c:	45c1                	li	a1,16
     74e:	c43e                	sw	a5,8(sp)
     750:	3c69                	jal	1ea <mini_itoa.part.0>
     752:	46c2                	lw	a3,16(sp)
     754:	4632                	lw	a2,12(sp)
     756:	85aa                	mv	a1,a0
     758:	1838                	add	a4,sp,56
     75a:	b7c1                	j	71a <mini_vpprintf+0x152>
     75c:	00448793          	add	a5,s1,4
     760:	c43e                	sw	a5,8(sp)
     762:	409c                	lw	a5,0(s1)
     764:	46c2                	lw	a3,16(sp)
     766:	4632                	lw	a2,12(sp)
     768:	00f10fa3          	sb	a5,31(sp)
     76c:	1838                	add	a4,sp,56
     76e:	4585                	li	a1,1
     770:	01f10513          	add	a0,sp,31
     774:	b765                	j	71c <mini_vpprintf+0x154>
     776:	4612                	lw	a2,4(sp)
     778:	8526                	mv	a0,s1
     77a:	b76d                	j	724 <mini_vpprintf+0x15c>

0000077c <printf>:
     77c:	fdc10113          	add	sp,sp,-36
     780:	ca32                	sw	a2,20(sp)
     782:	862a                	mv	a2,a0
     784:	c82e                	sw	a1,16(sp)
     786:	cc36                	sw	a3,24(sp)
     788:	4581                	li	a1,0
     78a:	0814                	add	a3,sp,16
     78c:	51600513          	li	a0,1302
     790:	c606                	sw	ra,12(sp)
     792:	ce3a                	sw	a4,28(sp)
     794:	d03e                	sw	a5,32(sp)
     796:	c036                	sw	a3,0(sp)
     798:	3d05                	jal	5c8 <mini_vpprintf>
     79a:	40b2                	lw	ra,12(sp)
     79c:	02410113          	add	sp,sp,36
     7a0:	8082                	ret

000007a2 <ssd1306_i2c_error.isra.0>:
 * error handler
 */
uint8_t ssd1306_i2c_error(uint8_t err)
{
	// report error
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     7a2:	6785                	lui	a5,0x1
     7a4:	050a                	sll	a0,a0,0x2
     7a6:	d7478793          	add	a5,a5,-652 # d74 <errstr>
     7aa:	97aa                	add	a5,a5,a0
     7ac:	438c                	lw	a1,0(a5)
     7ae:	6505                	lui	a0,0x1
uint8_t ssd1306_i2c_error(uint8_t err)
     7b0:	1151                	add	sp,sp,-12
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     7b2:	cfc50513          	add	a0,a0,-772 # cfc <main+0x318>
uint8_t ssd1306_i2c_error(uint8_t err)
     7b6:	c406                	sw	ra,8(sp)
	printf("ssd1306_i2c_error - timeout waiting for %s\n\r", errstr[err]);
     7b8:	37d1                	jal	77c <printf>
	
	// reset & initialize I2C
	ssd1306_i2c_setup();

	return 1;
}
     7ba:	40a2                	lw	ra,8(sp)
     7bc:	0131                	add	sp,sp,12
	ssd1306_i2c_setup();
     7be:	b4f5                	j	2aa <ssd1306_i2c_setup>

000007c0 <ssd1306_i2c_send.constprop.0.isra.0>:
uint8_t ssd1306_i2c_send(uint8_t addr, uint8_t *data, uint8_t sz)
{
	int32_t timeout;
	
	// wait for not busy
	timeout = TIMEOUT_MAX;
     7c0:	6761                	lui	a4,0x18
	while((I2C1->STAR2 & I2C_STAR2_BUSY) && (timeout--));
     7c2:	400057b7          	lui	a5,0x40005
	timeout = TIMEOUT_MAX;
     7c6:	6a070713          	add	a4,a4,1696 # 186a0 <main.c.57da8798+0x162b7>
	while((I2C1->STAR2 & I2C_STAR2_BUSY) && (timeout--));
     7ca:	40078793          	add	a5,a5,1024 # 40005400 <__global_pointer$+0x20004c00>
     7ce:	567d                	li	a2,-1
     7d0:	0187d683          	lhu	a3,24(a5)
     7d4:	8a89                	and	a3,a3,2
     7d6:	c2f1                	beqz	a3,89a <ssd1306_i2c_send.constprop.0.isra.0+0xda>
     7d8:	177d                	add	a4,a4,-1
     7da:	fec71be3          	bne	a4,a2,7d0 <ssd1306_i2c_send.constprop.0.isra.0+0x10>
	if(timeout==-1)
		return ssd1306_i2c_error(0);
     7de:	4501                	li	a0,0
     7e0:	a01d                	j	806 <ssd1306_i2c_send.constprop.0.isra.0+0x46>
	// send data one byte at a time
	while(sz--)
	{
		// wait for TX Empty
		timeout = TIMEOUT_MAX;
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     7e2:	40005737          	lui	a4,0x40005
	while(sz--)
     7e6:	95aa                	add	a1,a1,a0
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     7e8:	40070713          	add	a4,a4,1024 # 40005400 <__global_pointer$+0x20004c00>
	while(sz--)
     7ec:	0ff5f593          	zext.b	a1,a1
     7f0:	67e1                	lui	a5,0x18
     7f2:	6a178793          	add	a5,a5,1697 # 186a1 <main.c.57da8798+0x162b8>
		while(!(I2C1->STAR1 & I2C_STAR1_TXE) && (timeout--));
     7f6:	01475683          	lhu	a3,20(a4)
     7fa:	0806f693          	and	a3,a3,128
     7fe:	e689                	bnez	a3,808 <ssd1306_i2c_send.constprop.0.isra.0+0x48>
     800:	17fd                	add	a5,a5,-1
     802:	fbf5                	bnez	a5,7f6 <ssd1306_i2c_send.constprop.0.isra.0+0x36>
		if(timeout==-1)
			return ssd1306_i2c_error(3);
     804:	450d                	li	a0,3
		return ssd1306_i2c_error(0);
     806:	bf71                	j	7a2 <ssd1306_i2c_error.isra.0>
		
		// send command
		I2C1->DATAR = *data++;
     808:	00054783          	lbu	a5,0(a0)
     80c:	0505                	add	a0,a0,1
     80e:	00f71823          	sh	a5,16(a4)
	while(sz--)
     812:	0ff57793          	zext.b	a5,a0
     816:	fcf59de3          	bne	a1,a5,7f0 <ssd1306_i2c_send.constprop.0.isra.0+0x30>
	}

	// wait for tx complete
	timeout = TIMEOUT_MAX;
     81a:	66e1                	lui	a3,0x18
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     81c:	40005737          	lui	a4,0x40005
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (timeout--));
     820:	00070637          	lui	a2,0x70
	timeout = TIMEOUT_MAX;
     824:	6a068693          	add	a3,a3,1696 # 186a0 <main.c.57da8798+0x162b7>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     828:	40070713          	add	a4,a4,1024 # 40005400 <__global_pointer$+0x20004c00>
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (timeout--));
     82c:	08460613          	add	a2,a2,132 # 70084 <main.c.57da8798+0x6dc9b>
     830:	55fd                	li	a1,-1
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     832:	01475503          	lhu	a0,20(a4)
     836:	01875783          	lhu	a5,24(a4)
     83a:	07c2                	sll	a5,a5,0x10
     83c:	8fc9                	or	a5,a5,a0
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_BYTE_TRANSMITTED)) && (timeout--));
     83e:	8ff1                	and	a5,a5,a2
     840:	00c78763          	beq	a5,a2,84e <ssd1306_i2c_send.constprop.0.isra.0+0x8e>
     844:	16fd                	add	a3,a3,-1
     846:	feb696e3          	bne	a3,a1,832 <ssd1306_i2c_send.constprop.0.isra.0+0x72>
	if(timeout==-1)
		return ssd1306_i2c_error(4);
     84a:	4511                	li	a0,4
     84c:	bf6d                	j	806 <ssd1306_i2c_send.constprop.0.isra.0+0x46>

	// set STOP condition
	I2C1->CTLR1 |= I2C_CTLR1_STOP;
     84e:	00075783          	lhu	a5,0(a4)
     852:	2007e793          	or	a5,a5,512
     856:	00f71023          	sh	a5,0(a4)
	
	// we're happy
	return 0;
}
     85a:	8082                	ret
	I2C1->DATAR = addr<<1;
     85c:	07800793          	li	a5,120
     860:	00f71823          	sh	a5,16(a4)
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     864:	40005637          	lui	a2,0x40005
	timeout = TIMEOUT_MAX;
     868:	6761                	lui	a4,0x18
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     86a:	000706b7          	lui	a3,0x70
	timeout = TIMEOUT_MAX;
     86e:	6a070713          	add	a4,a4,1696 # 186a0 <main.c.57da8798+0x162b7>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     872:	40060613          	add	a2,a2,1024 # 40005400 <__global_pointer$+0x20004c00>
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     876:	08268693          	add	a3,a3,130 # 70082 <main.c.57da8798+0x6dc99>
     87a:	537d                	li	t1,-1
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     87c:	01465283          	lhu	t0,20(a2)
     880:	01865783          	lhu	a5,24(a2)
     884:	07c2                	sll	a5,a5,0x10
     886:	0057e7b3          	or	a5,a5,t0
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)) && (timeout--));
     88a:	8ff5                	and	a5,a5,a3
     88c:	f4d78be3          	beq	a5,a3,7e2 <ssd1306_i2c_send.constprop.0.isra.0+0x22>
     890:	177d                	add	a4,a4,-1
     892:	fe6715e3          	bne	a4,t1,87c <ssd1306_i2c_send.constprop.0.isra.0+0xbc>
		return ssd1306_i2c_error(2);
     896:	4509                	li	a0,2
     898:	b7bd                	j	806 <ssd1306_i2c_send.constprop.0.isra.0+0x46>
	I2C1->CTLR1 |= I2C_CTLR1_START;
     89a:	0007d703          	lhu	a4,0(a5)
	timeout = TIMEOUT_MAX;
     89e:	66e1                	lui	a3,0x18
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_MODE_SELECT)) && (timeout--));
     8a0:	00030637          	lui	a2,0x30
	I2C1->CTLR1 |= I2C_CTLR1_START;
     8a4:	10076713          	or	a4,a4,256
     8a8:	00e79023          	sh	a4,0(a5)
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     8ac:	40005737          	lui	a4,0x40005
	timeout = TIMEOUT_MAX;
     8b0:	6a068693          	add	a3,a3,1696 # 186a0 <main.c.57da8798+0x162b7>
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     8b4:	40070713          	add	a4,a4,1024 # 40005400 <__global_pointer$+0x20004c00>
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_MODE_SELECT)) && (timeout--));
     8b8:	0605                	add	a2,a2,1 # 30001 <main.c.57da8798+0x2dc18>
     8ba:	537d                	li	t1,-1
	uint32_t status = I2C1->STAR1 | (I2C1->STAR2<<16);
     8bc:	01475283          	lhu	t0,20(a4)
     8c0:	01875783          	lhu	a5,24(a4)
     8c4:	07c2                	sll	a5,a5,0x10
     8c6:	0057e7b3          	or	a5,a5,t0
	while((!ssd1306_i2c_chk_evt(SSD1306_I2C_EVENT_MASTER_MODE_SELECT)) && (timeout--));
     8ca:	8ff1                	and	a5,a5,a2
     8cc:	f8c788e3          	beq	a5,a2,85c <ssd1306_i2c_send.constprop.0.isra.0+0x9c>
     8d0:	16fd                	add	a3,a3,-1
     8d2:	fe6695e3          	bne	a3,t1,8bc <ssd1306_i2c_send.constprop.0.isra.0+0xfc>
		return ssd1306_i2c_error(1);
     8d6:	4505                	li	a0,1
     8d8:	b73d                	j	806 <ssd1306_i2c_send.constprop.0.isra.0+0x46>

000008da <ssd1306_cmd>:
{
     8da:	7179                	add	sp,sp,-48
	
	/* build command or data packets */
	if(cmd)
	{
		pkt[0] = 0;
		pkt[1] = *data;
     8dc:	00a100a3          	sb	a0,1(sp)
	else
	{
		pkt[0] = 0x40;
		memcpy(&pkt[1], data, sz);
	}
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     8e0:	4589                	li	a1,2
     8e2:	850a                	mv	a0,sp
     8e4:	d606                	sw	ra,44(sp)
		pkt[0] = 0;
     8e6:	00010023          	sb	zero,0(sp)
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     8ea:	3dd9                	jal	7c0 <ssd1306_i2c_send.constprop.0.isra.0>
}
     8ec:	50b2                	lw	ra,44(sp)
     8ee:	4501                	li	a0,0
     8f0:	6145                	add	sp,sp,48
     8f2:	8082                	ret

000008f4 <memset>:
     8f4:	962a                	add	a2,a2,a0
     8f6:	87aa                	mv	a5,a0
     8f8:	00c79363          	bne	a5,a2,8fe <memset+0xa>
     8fc:	8082                	ret
     8fe:	00b78023          	sb	a1,0(a5)
     902:	0785                	add	a5,a5,1
     904:	bfd5                	j	8f8 <memset+0x4>

00000906 <memcpy>:
     906:	4781                	li	a5,0
     908:	00f61363          	bne	a2,a5,90e <memcpy+0x8>
     90c:	8082                	ret
     90e:	00f58733          	add	a4,a1,a5
     912:	00074683          	lbu	a3,0(a4)
     916:	00f50733          	add	a4,a0,a5
     91a:	0785                	add	a5,a5,1
     91c:	00d70023          	sb	a3,0(a4)
     920:	b7e5                	j	908 <memcpy+0x2>

00000922 <ssd1306_refresh>:
{
     922:	7179                	add	sp,sp,-48
	ssd1306_cmd(SSD1306_COLUMNADDR);
     924:	02100513          	li	a0,33
{
     928:	d606                	sw	ra,44(sp)
     92a:	d422                	sw	s0,40(sp)
     92c:	d226                	sw	s1,36(sp)
	ssd1306_cmd(SSD1306_COLUMNADDR);
     92e:	3775                	jal	8da <ssd1306_cmd>
	ssd1306_cmd(SSD1306_OFFSET);   // Column start address (0 = reset)
     930:	4501                	li	a0,0
     932:	3765                	jal	8da <ssd1306_cmd>
	ssd1306_cmd(SSD1306_OFFSET+SSD1306_W-1); // Column end address (127 = reset)
     934:	07f00513          	li	a0,127
     938:	374d                	jal	8da <ssd1306_cmd>
	ssd1306_cmd(SSD1306_PAGEADDR);
     93a:	02200513          	li	a0,34
     93e:	3f71                	jal	8da <ssd1306_cmd>
	ssd1306_cmd(0); // Page start address (0 = reset)
     940:	4501                	li	a0,0
     942:	3f61                	jal	8da <ssd1306_cmd>
	ssd1306_cmd(7); // Page end address
     944:	20000437          	lui	s0,0x20000
     948:	451d                	li	a0,7
     94a:	00040413          	mv	s0,s0
     94e:	3771                	jal	8da <ssd1306_cmd>
    for(i=0;i<sizeof(ssd1306_buffer);i+=SSD1306_PSZ)
     950:	40040493          	add	s1,s0,1024 # 20000400 <_ebss>
		pkt[0] = 0x40;
     954:	04000793          	li	a5,64
		memcpy(&pkt[1], data, sz);
     958:	85a2                	mv	a1,s0
     95a:	02000613          	li	a2,32
     95e:	00110513          	add	a0,sp,1
		pkt[0] = 0x40;
     962:	00f10023          	sb	a5,0(sp)
		memcpy(&pkt[1], data, sz);
     966:	3745                	jal	906 <memcpy>
	return ssd1306_i2c_send(SSD1306_I2C_ADDR, pkt, sz+1);
     968:	02100593          	li	a1,33
     96c:	850a                	mv	a0,sp
     96e:	02040413          	add	s0,s0,32
     972:	35b9                	jal	7c0 <ssd1306_i2c_send.constprop.0.isra.0>
     974:	fe9410e3          	bne	s0,s1,954 <ssd1306_refresh+0x32>
}
     978:	50b2                	lw	ra,44(sp)
     97a:	5422                	lw	s0,40(sp)
     97c:	5492                	lw	s1,36(sp)
     97e:	6145                	add	sp,sp,48
     980:	8082                	ret

00000982 <SystemInit>:
     982:	400227b7          	lui	a5,0x40022
     986:	4705                	li	a4,1
     988:	c398                	sw	a4,0(a5)
     98a:	400217b7          	lui	a5,0x40021
     98e:	01080737          	lui	a4,0x1080
     992:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
     996:	08170713          	add	a4,a4,129 # 1080081 <main.c.57da8798+0x107dc98>
     99a:	c398                	sw	a4,0(a5)
     99c:	009f0737          	lui	a4,0x9f0
     9a0:	c798                	sw	a4,8(a5)
     9a2:	40021737          	lui	a4,0x40021
     9a6:	431c                	lw	a5,0(a4)
     9a8:	00679693          	sll	a3,a5,0x6
     9ac:	fe06dde3          	bgez	a3,9a6 <SystemInit+0x24>
     9b0:	435c                	lw	a5,4(a4)
     9b2:	400216b7          	lui	a3,0x40021
     9b6:	9bf1                	and	a5,a5,-4
     9b8:	0027e793          	or	a5,a5,2
     9bc:	c35c                	sw	a5,4(a4)
     9be:	4721                	li	a4,8
     9c0:	42dc                	lw	a5,4(a3)
     9c2:	8bb1                	and	a5,a5,12
     9c4:	fee79ee3          	bne	a5,a4,9c0 <SystemInit+0x3e>
     9c8:	e00007b7          	lui	a5,0xe0000
     9cc:	0f878793          	add	a5,a5,248 # e00000f8 <__global_pointer$+0xbffff8f8>
     9d0:	0007a023          	sw	zero,0(a5)
     9d4:	e00007b7          	lui	a5,0xe0000
     9d8:	0f478793          	add	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
     9dc:	08000713          	li	a4,128
     9e0:	c398                	sw	a4,0(a5)
     9e2:	8082                	ret

000009e4 <main>:
};

typedef struct car_state car_state_data;

int main()
{
     9e4:	715d                	add	sp,sp,-80
     9e6:	c686                	sw	ra,76(sp)
     9e8:	c4a2                	sw	s0,72(sp)
     9ea:	c2a6                	sw	s1,68(sp)
	// 48MHz internal clock
	SystemInit();
     9ec:	3f59                	jal	982 <SystemInit>
    GPIO_port_enable(GPIO_port_A);
     9ee:	400214b7          	lui	s1,0x40021
     9f2:	4c9c                	lw	a5,24(s1)
    GPIO_pinMode(BZR_PIN, GPIO_pinMode_O_pushPull, GPIO_Speed_10MHz);
     9f4:	f10006b7          	lui	a3,0xf1000
     9f8:	16fd                	add	a3,a3,-1 # f0ffffff <__global_pointer$+0xd0fff7ff>
    GPIO_port_enable(GPIO_port_A);
     9fa:	0047e793          	or	a5,a5,4
     9fe:	cc9c                	sw	a5,24(s1)
    GPIO_port_enable(GPIO_port_D);
     a00:	4c9c                	lw	a5,24(s1)
    GPIO_pinMode(BZR_PIN, GPIO_pinMode_O_pushPull, GPIO_Speed_10MHz);
     a02:	40011437          	lui	s0,0x40011
    GPIO_pinMode(ROT_B_PIN, GPIO_pinMode_I_pullUp, GPIO_Speed_10MHz);
     a06:	6605                	lui	a2,0x1
    GPIO_port_enable(GPIO_port_D);
     a08:	0207e793          	or	a5,a5,32
     a0c:	cc9c                	sw	a5,24(s1)
    GPIO_port_enable(GPIO_port_C);
     a0e:	4c9c                	lw	a5,24(s1)
    GPIO_pinMode(ROT_B_PIN, GPIO_pinMode_I_pullUp, GPIO_Speed_10MHz);
     a10:	80060613          	add	a2,a2,-2048 # 800 <ssd1306_i2c_send.constprop.0.isra.0+0x40>

  init_gpio();

	Delay_Ms( 100 );
     a14:	00092537          	lui	a0,0x92
    GPIO_port_enable(GPIO_port_C);
     a18:	0107e793          	or	a5,a5,16
     a1c:	cc9c                	sw	a5,24(s1)
    GPIO_pinMode(BZR_PIN, GPIO_pinMode_O_pushPull, GPIO_Speed_10MHz);
     a1e:	400117b7          	lui	a5,0x40011
     a22:	40078793          	add	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
     a26:	4398                	lw	a4,0(a5)
	Delay_Ms( 100 );
     a28:	7c050513          	add	a0,a0,1984 # 927c0 <main.c.57da8798+0x903d7>
    GPIO_pinMode(BZR_PIN, GPIO_pinMode_O_pushPull, GPIO_Speed_10MHz);
     a2c:	8f75                	and	a4,a4,a3
     a2e:	c398                	sw	a4,0(a5)
     a30:	4398                	lw	a4,0(a5)
     a32:	010006b7          	lui	a3,0x1000
     a36:	8f55                	or	a4,a4,a3
     a38:	c398                	sw	a4,0(a5)
    GPIO_pinMode(BTN_PIN, GPIO_pinMode_I_pullUp, GPIO_Speed_10MHz);
     a3a:	4018                	lw	a4,0(s0)
     a3c:	fff106b7          	lui	a3,0xfff10
     a40:	16fd                	add	a3,a3,-1 # fff0ffff <__global_pointer$+0xdff0f7ff>
     a42:	8f75                	and	a4,a4,a3
     a44:	c018                	sw	a4,0(s0)
     a46:	4018                	lw	a4,0(s0)
     a48:	000806b7          	lui	a3,0x80
     a4c:	8f55                	or	a4,a4,a3
     a4e:	c018                	sw	a4,0(s0)
     a50:	4741                	li	a4,16
     a52:	c818                	sw	a4,16(s0)
    GPIO_pinMode(ROT_A_PIN, GPIO_pinMode_I_pullUp, GPIO_Speed_10MHz);
     a54:	4398                	lw	a4,0(a5)
     a56:	ff1006b7          	lui	a3,0xff100
     a5a:	16fd                	add	a3,a3,-1 # ff0fffff <__global_pointer$+0xdf0ff7ff>
     a5c:	8f75                	and	a4,a4,a3
     a5e:	c398                	sw	a4,0(a5)
     a60:	4398                	lw	a4,0(a5)
     a62:	008006b7          	lui	a3,0x800
     a66:	8f55                	or	a4,a4,a3
     a68:	c398                	sw	a4,0(a5)
     a6a:	02000713          	li	a4,32
     a6e:	cb98                	sw	a4,16(a5)
    GPIO_pinMode(ROT_B_PIN, GPIO_pinMode_I_pullUp, GPIO_Speed_10MHz);
     a70:	400117b7          	lui	a5,0x40011
     a74:	80078793          	add	a5,a5,-2048 # 40010800 <__global_pointer$+0x20010000>
     a78:	4394                	lw	a3,0(a5)
     a7a:	777d                	lui	a4,0xfffff
     a7c:	0ff70713          	add	a4,a4,255 # fffff0ff <__global_pointer$+0xdfffe8ff>
     a80:	c03a                	sw	a4,0(sp)
     a82:	8ef9                	and	a3,a3,a4
     a84:	c394                	sw	a3,0(a5)
     a86:	4394                	lw	a3,0(a5)
     a88:	8ed1                	or	a3,a3,a2
     a8a:	c394                	sw	a3,0(a5)
     a8c:	4691                	li	a3,4
     a8e:	cb94                	sw	a3,16(a5)
	Delay_Ms( 100 );
     a90:	f44ff0ef          	jal	1d4 <DelaySysTick>
	// printf("\r\r\n\ni2c_oled example\n\r");

	// init i2c and oled
	Delay_Ms( 100 );	// give OLED some more time
     a94:	00092537          	lui	a0,0x92
     a98:	7c050513          	add	a0,a0,1984 # 927c0 <main.c.57da8798+0x903d7>
     a9c:	f38ff0ef          	jal	1d4 <DelaySysTick>
 * init I2C and GPIO
 */
uint8_t ssd1306_i2c_init(void)
{
	// Enable GPIOC and I2C
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC;
     aa0:	4c9c                	lw	a5,24(s1)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     aa2:	002006b7          	lui	a3,0x200
	// PC1 is SDA, 10MHz Output, alt func, open-drain
	GPIOC->CFGLR &= ~(0xf<<(4*1));
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF)<<(4*1);
	
	// PC2 is SCL, 10MHz Output, alt func, open-drain
	GPIOC->CFGLR &= ~(0xf<<(4*2));
     aa6:	4702                	lw	a4,0(sp)
	RCC->APB2PCENR |= RCC_APB2Periph_GPIOC;
     aa8:	0107e793          	or	a5,a5,16
     aac:	cc9c                	sw	a5,24(s1)
	RCC->APB1PCENR |= RCC_APB1Periph_I2C1;
     aae:	4cdc                	lw	a5,28(s1)
     ab0:	8fd5                	or	a5,a5,a3
     ab2:	ccdc                	sw	a5,28(s1)
	GPIOC->CFGLR &= ~(0xf<<(4*1));
     ab4:	401c                	lw	a5,0(s0)
     ab6:	f0f7f793          	and	a5,a5,-241
     aba:	c01c                	sw	a5,0(s0)
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF)<<(4*1);
     abc:	401c                	lw	a5,0(s0)
     abe:	0d07e793          	or	a5,a5,208
     ac2:	c01c                	sw	a5,0(s0)
	GPIOC->CFGLR &= ~(0xf<<(4*2));
     ac4:	401c                	lw	a5,0(s0)
     ac6:	8ff9                	and	a5,a5,a4
     ac8:	c01c                	sw	a5,0(s0)
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_OD_AF)<<(4*2);
     aca:	401c                	lw	a5,0(s0)
     acc:	6705                	lui	a4,0x1
     ace:	d0070713          	add	a4,a4,-768 # d00 <main+0x31c>
     ad2:	8fd9                	or	a5,a5,a4
     ad4:	c01c                	sw	a5,0(s0)
{
	// pulse reset
	ssd1306_rst();
	
	// initialize OLED
	uint8_t *cmd_list = (uint8_t *)ssd1306_init_array;
     ad6:	6405                	lui	s0,0x1
	GPIOC->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP)<<(4*4);
	GPIOC->BSHR = (1<<(16+4));
#endif

	// load I2C regs
	ssd1306_i2c_setup();
     ad8:	fd2ff0ef          	jal	2aa <ssd1306_i2c_setup>
     adc:	d8840413          	add	s0,s0,-632 # d88 <ssd1306_init_array>
	while(*cmd_list != SSD1306_TERMINATE_CMDS)
     ae0:	00044503          	lbu	a0,0(s0)
     ae4:	0ff00793          	li	a5,255
     ae8:	00f51c63          	bne	a0,a5,b00 <main+0x11c>
	memset(ssd1306_buffer, color ? 0xFF : 0x00, sizeof(ssd1306_buffer));
     aec:	20000537          	lui	a0,0x20000
     af0:	40000613          	li	a2,1024
     af4:	4581                	li	a1,0
     af6:	00050513          	mv	a0,a0
     afa:	3bed                	jal	8f4 <memset>
			return 1;
	}
	
	// clear display
	ssd1306_setbuf(0);
	ssd1306_refresh();
     afc:	351d                	jal	922 <ssd1306_refresh>
     afe:	a021                	j	b06 <main+0x122>
		if(ssd1306_cmd(*cmd_list++))
     b00:	0405                	add	s0,s0,1
     b02:	3be1                	jal	8da <ssd1306_cmd>
     b04:	dd71                	beqz	a0,ae0 <main+0xfc>
	memset(ssd1306_buffer, color ? 0xFF : 0x00, sizeof(ssd1306_buffer));
     b06:	200007b7          	lui	a5,0x20000
     b0a:	00078513          	mv	a0,a5
     b0e:	40000613          	li	a2,1024
     b12:	4581                	li	a1,0
     b14:	33c5                	jal	8f4 <memset>
    bool button_state = false;
    bool rot_a_state = false;
    bool rot_b_state = false;

    ssd1306_setbuf(0);
    ssd1306_drawImage(0, 0, movoid_title, 128, 64, 0);
     b16:	6605                	lui	a2,0x1
     b18:	04000713          	li	a4,64
     b1c:	08000693          	li	a3,128
     b20:	e7c60613          	add	a2,a2,-388 # e7c <movoid_title>
     b24:	4581                	li	a1,0
     b26:	4501                	li	a0,0
     b28:	fd6ff0ef          	jal	2fe <ssd1306_drawImage.constprop.0>
    ssd1306_refresh();
     b2c:	3bdd                	jal	922 <ssd1306_refresh>
	  Delay_Ms(2000);
     b2e:	00b72537          	lui	a0,0xb72
     b32:	b0050513          	add	a0,a0,-1280 # b71b00 <main.c.57da8798+0xb6f717>
     b36:	e9eff0ef          	jal	1d4 <DelaySysTick>

    int flip_c = 0;
    bool flip_flag = false;

    car_state_data car_s[] = {
     b3a:	6585                	lui	a1,0x1
     b3c:	02400613          	li	a2,36
     b40:	cd858593          	add	a1,a1,-808 # cd8 <main+0x2f4>
     b44:	1008                	add	a0,sp,32
     b46:	33c1                	jal	906 <memcpy>
     b48:	400117b7          	lui	a5,0x40011
     b4c:	40078793          	add	a5,a5,1024 # 40011400 <__global_pointer$+0x20010c00>
    bool flip_flag = false;
     b50:	c402                	sw	zero,8(sp)
    int flip_c = 0;
     b52:	c202                	sw	zero,4(sp)
    bool rot_a_state = false;
     b54:	c002                	sw	zero,0(sp)
    bool button_state = false;
     b56:	4701                	li	a4,0
    int newt_y = 20;
     b58:	44d1                	li	s1,20
    int newt_x = 100;
     b5a:	06400413          	li	s0,100
     b5e:	c63e                	sw	a5,12(sp)
    };

		while(1)
		{

      uint8_t button_is_pressed = !GPIO_digitalRead(BTN_PIN);
     b60:	400117b7          	lui	a5,0x40011
     b64:	479c                	lw	a5,8(a5)
     b66:	8bc1                	and	a5,a5,16
     b68:	0017b693          	seqz	a3,a5
     b6c:	c836                	sw	a3,16(sp)

      // buzzer on!
      if (button_is_pressed)
     b6e:	e3a1                	bnez	a5,bae <main+0x1ca>
      {
          GPIO_digitalWrite(BZR_PIN, high);
     b70:	4732                	lw	a4,12(sp)
     b72:	04000793          	li	a5,64
     b76:	cb1c                	sw	a5,16(a4)
        newt_x -= newt_step;
      }
      button_state = button_is_pressed;

      // get rotaly-encoder value
      uint8_t rot_a_is_pressed = !GPIO_digitalRead(ROT_A_PIN);
     b78:	47b2                	lw	a5,12(sp)
      uint8_t rot_b_state = !GPIO_digitalRead(ROT_B_PIN);

      if (rot_a_is_pressed != rot_a_state) {
     b7a:	4602                	lw	a2,0(sp)
      uint8_t rot_a_is_pressed = !GPIO_digitalRead(ROT_A_PIN);
     b7c:	4798                	lw	a4,8(a5)
      uint8_t rot_b_state = !GPIO_digitalRead(ROT_B_PIN);
     b7e:	400117b7          	lui	a5,0x40011
     b82:	80078793          	add	a5,a5,-2048 # 40010800 <__global_pointer$+0x20010000>
     b86:	02077713          	and	a4,a4,32
     b8a:	479c                	lw	a5,8(a5)
      if (rot_a_is_pressed != rot_a_state) {
     b8c:	00173693          	seqz	a3,a4
     b90:	12c68e63          	beq	a3,a2,ccc <main+0x2e8>
     b94:	8b91                	and	a5,a5,4
        rot_a_state = rot_a_is_pressed;

        if (!rot_a_state && rot_b_state) {
     b96:	c31d                	beqz	a4,bbc <main+0x1d8>
     b98:	12079163          	bnez	a5,cba <main+0x2d6>
          newt_y -= 3;
     b9c:	c002                	sw	zero,0(sp)
     b9e:	14f5                	add	s1,s1,-3 # 40020ffd <__global_pointer$+0x200207fd>
          newt_y += 3;
        } 
      } 

      // turn aroud
      if (newt_x < 0) {
     ba0:	12044863          	bltz	s0,cd0 <main+0x2ec>
        newt_x = 100;
      }
      if (newt_y < 0) {
     ba4:	0204d363          	bgez	s1,bca <main+0x1e6>
        newt_y = 64;
     ba8:	04000493          	li	s1,64
     bac:	a01d                	j	bd2 <main+0x1ee>
          GPIO_digitalWrite(BZR_PIN, low);
     bae:	46b2                	lw	a3,12(sp)
     bb0:	004007b7          	lui	a5,0x400
     bb4:	ca9c                	sw	a5,16(a3)
      if (button_state && !button_is_pressed){
     bb6:	d369                	beqz	a4,b78 <main+0x194>
        newt_x -= newt_step;
     bb8:	141d                	add	s0,s0,-25
     bba:	bf7d                	j	b78 <main+0x194>
        if (rot_a_state && rot_b_state) {
     bbc:	10079563          	bnez	a5,cc6 <main+0x2e2>
        rot_a_state = rot_a_is_pressed;
     bc0:	4785                	li	a5,1
     bc2:	c03e                	sw	a5,0(sp)
          newt_y += 3;
     bc4:	048d                	add	s1,s1,3
      if (newt_x < 0) {
     bc6:	0c044d63          	bltz	s0,ca0 <main+0x2bc>
      } 
      else if (newt_y > 64) {
     bca:	04000793          	li	a5,64
     bce:	0c97cc63          	blt	a5,s1,ca6 <main+0x2c2>
     bd2:	200007b7          	lui	a5,0x20000
     bd6:	00078513          	mv	a0,a5
     bda:	40000613          	li	a2,1024
     bde:	4581                	li	a1,0
     be0:	3b11                	jal	8f4 <memset>
      }

      // clear buffer for next mode
      ssd1306_setbuf(0);

      flip_c ++;
     be2:	4792                	lw	a5,4(sp)
     be4:	0785                	add	a5,a5,1 # 20000001 <ssd1306_buffer+0x1>
     be6:	c23e                	sw	a5,4(sp)

      if (flip_c > 100) {
     be8:	4712                	lw	a4,4(sp)
     bea:	06500793          	li	a5,101
     bee:	00f71763          	bne	a4,a5,bfc <main+0x218>
        flip_flag = !flip_flag;
     bf2:	47a2                	lw	a5,8(sp)
        flip_c = 0;
     bf4:	c202                	sw	zero,4(sp)
        flip_flag = !flip_flag;
     bf6:	0017c793          	xor	a5,a5,1
     bfa:	c43e                	sw	a5,8(sp)
      }

      if(flip_flag){
     bfc:	47a2                	lw	a5,8(sp)
        ssd1306_drawImage(newt_x, newt_y, newt_left, 24, 24, 0);
     bfe:	0ff47513          	zext.b	a0,s0
     c02:	0ff4f593          	zext.b	a1,s1
     c06:	4761                	li	a4,24
     c08:	46e1                	li	a3,24
      if(flip_flag){
     c0a:	c3c5                	beqz	a5,caa <main+0x2c6>
        ssd1306_drawImage(newt_x, newt_y, newt_left, 24, 24, 0);
     c0c:	6605                	lui	a2,0x1
     c0e:	e3460613          	add	a2,a2,-460 # e34 <newt_left>
      } else {
        ssd1306_drawImage(newt_x, newt_y, newt_right, 24, 24, 0);
     c12:	eecff0ef          	jal	2fe <ssd1306_drawImage.constprop.0>
        flip_c = 0;
     c16:	4781                	li	a5,0
			ssd1306_drawPixel(y, x, color);
     c18:	0ff7f593          	zext.b	a1,a5
     c1c:	4529                	li	a0,10
     c1e:	ca3e                	sw	a5,20(sp)
     c20:	fd2ff0ef          	jal	3f2 <ssd1306_drawPixel.constprop.0>
     c24:	47d2                	lw	a5,20(sp)
	for(x=x0;x<=x1;x++)
     c26:	04100713          	li	a4,65
     c2a:	0785                	add	a5,a5,1
     c2c:	01079693          	sll	a3,a5,0x10
     c30:	82c1                	srl	a3,a3,0x10
     c32:	07c2                	sll	a5,a5,0x10
     c34:	87c1                	sra	a5,a5,0x10
     c36:	fee691e3          	bne	a3,a4,c18 <main+0x234>
      // 車を描画
      for (int i = 0; i < 3; i++){

        ssd1306_drawImage(car_s[i].car_x, car_s[i].car_y, car, 24, 24, 0);

        if (flip_c % 25 == 0) {
     c3a:	4512                	lw	a0,4(sp)
     c3c:	45e5                	li	a1,25
     c3e:	cd2ff0ef          	jal	110 <__modsi3>
     c42:	82aa                	mv	t0,a0
     c44:	101c                	add	a5,sp,32
        ssd1306_drawImage(car_s[i].car_x, car_s[i].car_y, car, 24, 24, 0);
     c46:	6385                	lui	t2,0x1
     c48:	0047a303          	lw	t1,4(a5)
     c4c:	0007c503          	lbu	a0,0(a5)
     c50:	da438613          	add	a2,t2,-604 # da4 <car>
     c54:	4761                	li	a4,24
     c56:	46e1                	li	a3,24
     c58:	0ff37593          	zext.b	a1,t1
     c5c:	ce16                	sw	t0,28(sp)
     c5e:	ca3e                	sw	a5,20(sp)
     c60:	cc1a                	sw	t1,24(sp)
     c62:	e9cff0ef          	jal	2fe <ssd1306_drawImage.constprop.0>
        if (flip_c % 25 == 0) {
     c66:	42f2                	lw	t0,28(sp)
     c68:	47d2                	lw	a5,20(sp)
     c6a:	6385                	lui	t2,0x1
     c6c:	00029963          	bnez	t0,c7e <main+0x29a>
          if (car_s[i].dest) {
     c70:	0087c703          	lbu	a4,8(a5)
     c74:	4362                	lw	t1,24(sp)
     c76:	cf15                	beqz	a4,cb2 <main+0x2ce>
            car_s[i].car_y ++;
     c78:	0305                	add	t1,t1,1
          } else {
            car_s[i].car_y --;
     c7a:	0067a223          	sw	t1,4(a5)
          }
        }

        if (car_s[i].car_y > 64) {
     c7e:	43d8                	lw	a4,4(a5)
     c80:	04000693          	li	a3,64
     c84:	02e6c963          	blt	a3,a4,cb6 <main+0x2d2>
          car_s[i].car_y = 0;
        }
        if (car_s[i].car_y < 0) {
     c88:	00075463          	bgez	a4,c90 <main+0x2ac>
          car_s[i].car_y = 64;
     c8c:	04000713          	li	a4,64
     c90:	c3d8                	sw	a4,4(a5)
      for (int i = 0; i < 3; i++){
     c92:	07b1                	add	a5,a5,12
     c94:	00d8                	add	a4,sp,68
     c96:	fae799e3          	bne	a5,a4,c48 <main+0x264>
        }
      }

      ssd1306_refresh();
     c9a:	3161                	jal	922 <ssd1306_refresh>
      button_state = button_is_pressed;
     c9c:	4742                	lw	a4,16(sp)
		{
     c9e:	b5c9                	j	b60 <main+0x17c>
        newt_x = 100;
     ca0:	06400413          	li	s0,100
     ca4:	b71d                	j	bca <main+0x1e6>
        newt_y = 0;
     ca6:	4481                	li	s1,0
     ca8:	b72d                	j	bd2 <main+0x1ee>
        ssd1306_drawImage(newt_x, newt_y, newt_right, 24, 24, 0);
     caa:	6605                	lui	a2,0x1
     cac:	dec60613          	add	a2,a2,-532 # dec <newt_right>
     cb0:	b78d                	j	c12 <main+0x22e>
            car_s[i].car_y --;
     cb2:	137d                	add	t1,t1,-1
     cb4:	b7d9                	j	c7a <main+0x296>
          car_s[i].car_y = 64;
     cb6:	4701                	li	a4,0
     cb8:	bfe1                	j	c90 <main+0x2ac>
        rot_a_state = rot_a_is_pressed;
     cba:	c002                	sw	zero,0(sp)
      if (newt_x < 0) {
     cbc:	f00457e3          	bgez	s0,bca <main+0x1e6>
        newt_x = 100;
     cc0:	06400413          	li	s0,100
     cc4:	b739                	j	bd2 <main+0x1ee>
        rot_a_state = rot_a_is_pressed;
     cc6:	4785                	li	a5,1
     cc8:	c03e                	sw	a5,0(sp)
     cca:	bfcd                	j	cbc <main+0x2d8>
      if (newt_x < 0) {
     ccc:	f00453e3          	bgez	s0,bd2 <main+0x1ee>
        newt_x = 100;
     cd0:	06400413          	li	s0,100
     cd4:	bdc1                	j	ba4 <main+0x1c0>
     cd6:	0000                	unimp
     cd8:	0000004b          	.insn	4, 0x004b
     cdc:	000a                	c.slli	zero,0x2
     cde:	0000                	unimp
     ce0:	0001                	nop
     ce2:	0000                	unimp
     ce4:	0032                	c.slli	zero,0xc
     ce6:	0000                	unimp
     ce8:	0032                	c.slli	zero,0xc
     cea:	0000                	unimp
     cec:	0000                	unimp
     cee:	0000                	unimp
     cf0:	0019                	c.nop	6
     cf2:	0000                	unimp
     cf4:	0014                	.insn	2, 0x0014
     cf6:	0000                	unimp
     cf8:	0001                	nop
     cfa:	0000                	unimp
     cfc:	31647373          	csrrc	t1,0x316,8
     d00:	5f363033          	.insn	4, 0x5f363033
     d04:	3269                	jal	68e <mini_vpprintf+0xc6>
     d06:	72655f63          	bge	a0,t1,1444 <_data_lma+0x1c8>
     d0a:	6f72                	.insn	2, 0x6f72
     d0c:	2072                	.insn	2, 0x2072
     d0e:	202d                	jal	d38 <main+0x354>
     d10:	6974                	.insn	2, 0x6974
     d12:	656d                	lui	a0,0x1b
     d14:	2074756f          	jal	a0,4871a <main.c.57da8798+0x46331>
     d18:	74696177          	.insn	4, 0x74696177
     d1c:	6e69                	lui	t3,0x1a
     d1e:	6f662067          	.insn	4, 0x6f662067
     d22:	2072                	.insn	2, 0x2072
     d24:	7325                	lui	t1,0xfffe9
     d26:	0d0a                	sll	s10,s10,0x2
     d28:	0000                	unimp
     d2a:	0000                	unimp
     d2c:	6f6e                	.insn	2, 0x6f6e
     d2e:	2074                	.insn	2, 0x2074
     d30:	7562                	.insn	2, 0x7562
     d32:	00007973          	csrrc	s2,ustatus,0
     d36:	0000                	unimp
     d38:	616d                	add	sp,sp,240
     d3a:	72657473          	csrrc	s0,mhpmevent6h,10
     d3e:	6d20                	.insn	2, 0x6d20
     d40:	0065646f          	jal	s0,56d46 <main.c.57da8798+0x5495d>
     d44:	7274                	.insn	2, 0x7274
     d46:	6e61                	lui	t3,0x18
     d48:	74696d73          	csrrs	s10,0x746,18
     d4c:	6d20                	.insn	2, 0x6d20
     d4e:	0065646f          	jal	s0,56d54 <main.c.57da8798+0x5496b>
     d52:	0000                	unimp
     d54:	7874                	.insn	2, 0x7874
     d56:	6520                	.insn	2, 0x6520
     d58:	706d                	c.lui	zero,0xffffb
     d5a:	7974                	.insn	2, 0x7974
     d5c:	0000                	unimp
     d5e:	0000                	unimp
     d60:	7274                	.insn	2, 0x7274
     d62:	6e61                	lui	t3,0x18
     d64:	74696d73          	csrrs	s10,0x746,18
     d68:	6320                	.insn	2, 0x6320
     d6a:	6c706d6f          	jal	s10,7c30 <main.c.57da8798+0x5847>
     d6e:	7465                	lui	s0,0xffff9
     d70:	0065                	c.nop	25
	...

00000d74 <errstr>:
     d74:	0d2c 0000 0d38 0000 0d44 0000 0d54 0000     ,...8...D...T...
     d84:	0d60 0000                                   `...

00000d88 <ssd1306_init_array>:
     d88:	d5ae a880 d33f 4000 148d 0020 c8a1 12da     ....?..@.. .....
     d98:	8f81 f1d9 40db a6a4 ffaf 0000               .....@......

00000da4 <car>:
	...
     dac:	0000 007c 7c00 0000 007c ff03 03c0 c0ff     ..|..|..|.......
     dbc:	ff03 00c0 c07f 7f00 00c0 c07f 7c00 0040     .............|@.
     dcc:	407c 7c00 0340 40fc ff03 03c0 00fc 7c00     |@.|@..@.......|
     ddc:	0000 0074 7c00 0000 0000 0000 0000 0000     ..t..|..........

00000dec <newt_right>:
     dec:	0000 0000 0000 f00f 0f00 00f0 3c3c 3c00     ............<<.<
     dfc:	003c 00f0 f0c0 c000 03f3 f30f 0f03 c3fc     <...............
     e0c:	fc3f 3fc3 ff3f 3fff ffff ff00 00f0 f0ff     ?..??..?........
     e1c:	c003 033c 3cc0 0000 0000 0000 0000 0000     ..<..<..........
	...

00000e34 <newt_left>:
	...
     e44:	0000 c003 033c 3cc0 ff00 00f0 f0ff ff3f     ....<..<......?.
     e54:	3fff ffff c3fc fc3f 3fc3 03f3 f30f 0f03     .?....?..?......
     e64:	00f0 f0c0 c000 3c3c 3c00 003c f00f 0f00     ......<<.<<.....
     e74:	00f0 0000 0000 0000                         ........

00000e7c <movoid_title>:
     e7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     e8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     e9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     eac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     ebc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     ecc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     edc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     eec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     efc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     f0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     f1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     f2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     f3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     f4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     f5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     f6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     f7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     f8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
     f9c:	f8ff ff7f ffff ffff ffff ffff ffff ffff     ................
     fac:	f8ff ff7f ffff ffff ffff ffff ffff ffff     ................
     fbc:	f8ff ff3f ffff ffff ffff ffff ffff ffff     ..?.............
     fcc:	f8ff fe3f ff0f ffff ffff f0ff e0ff ffff     ..?.............
     fdc:	f8ff fe3f ff0f ffff ffff f0ff e07f ffff     ..?.............
     fec:	fcff fe3f ff0f ffff ffff f0ff c03f ffff     ..?.........?...
     ffc:	fcff fe3f ff0f ffff ffff f0ff c03f ffff     ..?.........?...
    100c:	fcff ff3f ffff ffff ffff f0ff c01f ffff     ..?.............
    101c:	fcff ff3f ffff ffff ffff f0ff 901f ffff     ..?.............
    102c:	fcff ff3f ffff ffff ffff f0ff 904f ffff     ..?.........O...
    103c:	fcff 0f00 800f 8003 60f0 f800 904f ffff     .........`..O...
    104c:	fcff 0f1e 8707 83c3 60f0 78f0 3067 ff7f     .........`.xg0..
    105c:	fcff 0f1f 8707 c3c3 e0f0 78f0 3067 ff7f     ...........xg0..
    106c:	feff 0f1f 8787 c1c3 e0f0 78f8 3073 ff7f     ...........xs0..
    107c:	feff 0f1f 8387 c1c1 f0f0 78f8 707b ff7f     ...........x{p..
    108c:	feff 0f1f 8387 e1c1 f0f0 78f8 7838 ff7f     ...........x8x..
    109c:	feff 071f 8387 e0e1 f0f0 78f8 783c ff7f     ...........x<x..
    10ac:	feff 071f c387 f0e1 f0f0 78f8 f83c ff7f     ...........x<...
    10bc:	feff 071f c387 f0e1 f0e0 78f8 f83f ff7f     ...........x?...
    10cc:	feff 870f c383 f0e1 f060 38f8 f83f ff3f     ........`..8?.?.
    10dc:	feff 870f c383 f8e1 f061 3c78 f83f ff3f     ........a.x<?.?.
    10ec:	feff 870f c3c3 f8e1 f061 3c7c f83f ff3f     ........a.|<?.?.
    10fc:	ffff 870f c3c3 f8e0 f821 3c7c f83f ff3f     ........!.|<?.?.
    110c:	ffff 870f c1c3 fce0 f821 3c7c f81f ff3f     ........!.|<..?.
    111c:	ffff 0300 c0c3 fc00 f801 3c00 fc1f ff3f     ...........<..?.
    112c:	ffff 0700 e0c3 fe00 f803 3c00 fc3f ff3f     ...........<?.?.
    113c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    114c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    115c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    116c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    117c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    118c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    119c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    11ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    11bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    11cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    11dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    11ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    11fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    120c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    121c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    122c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    123c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    124c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    125c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    126c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
